// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: features.proto

#include "features.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR BatchFeatures::BatchFeatures(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BatchFeaturesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BatchFeaturesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BatchFeaturesDefaultTypeInternal() {}
  union {
    BatchFeatures _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BatchFeaturesDefaultTypeInternal _BatchFeatures_default_instance_;
PROTOBUF_CONSTEXPR Features_ValueEntry_DoNotUse::Features_ValueEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Features_ValueEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Features_ValueEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Features_ValueEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Features_ValueEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Features_ValueEntry_DoNotUseDefaultTypeInternal _Features_ValueEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Features::Features(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FeaturesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeaturesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeaturesDefaultTypeInternal() {}
  union {
    Features _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeaturesDefaultTypeInternal _Features_default_instance_;
PROTOBUF_CONSTEXPR Feature::Feature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.kind_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct FeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeatureDefaultTypeInternal() {}
  union {
    Feature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeatureDefaultTypeInternal _Feature_default_instance_;
PROTOBUF_CONSTEXPR UserAction::UserAction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.first_time_)*/int64_t{0}
  , /*decltype(_impl_.last_second_time_)*/int64_t{0}
  , /*decltype(_impl_.last_time_)*/int64_t{0}
  , /*decltype(_impl_.cnt_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserActionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserActionDefaultTypeInternal() {}
  union {
    UserAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserActionDefaultTypeInternal _UserAction_default_instance_;
PROTOBUF_CONSTEXPR StrInt::StrInt(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StrIntDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StrIntDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StrIntDefaultTypeInternal() {}
  union {
    StrInt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StrIntDefaultTypeInternal _StrInt_default_instance_;
PROTOBUF_CONSTEXPR StrFloat::StrFloat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StrFloatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StrFloatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StrFloatDefaultTypeInternal() {}
  union {
    StrFloat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StrFloatDefaultTypeInternal _StrFloat_default_instance_;
PROTOBUF_CONSTEXPR IntInt::IntInt(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/0
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IntIntDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IntIntDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IntIntDefaultTypeInternal() {}
  union {
    IntInt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IntIntDefaultTypeInternal _IntInt_default_instance_;
PROTOBUF_CONSTEXPR IntFloat::IntFloat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/0
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IntFloatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IntFloatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IntFloatDefaultTypeInternal() {}
  union {
    IntFloat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IntFloatDefaultTypeInternal _IntFloat_default_instance_;
PROTOBUF_CONSTEXPR LongFloat::LongFloat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/int64_t{0}
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LongFloatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LongFloatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LongFloatDefaultTypeInternal() {}
  union {
    LongFloat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LongFloatDefaultTypeInternal _LongFloat_default_instance_;
PROTOBUF_CONSTEXPR LongInt::LongInt(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/int64_t{0}
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LongIntDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LongIntDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LongIntDefaultTypeInternal() {}
  union {
    LongInt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LongIntDefaultTypeInternal _LongInt_default_instance_;
PROTOBUF_CONSTEXPR StrIntList::StrIntList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StrIntListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StrIntListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StrIntListDefaultTypeInternal() {}
  union {
    StrIntList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StrIntListDefaultTypeInternal _StrIntList_default_instance_;
PROTOBUF_CONSTEXPR StrFloatList::StrFloatList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StrFloatListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StrFloatListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StrFloatListDefaultTypeInternal() {}
  union {
    StrFloatList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StrFloatListDefaultTypeInternal _StrFloatList_default_instance_;
PROTOBUF_CONSTEXPR IntFloatList::IntFloatList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IntFloatListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IntFloatListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IntFloatListDefaultTypeInternal() {}
  union {
    IntFloatList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IntFloatListDefaultTypeInternal _IntFloatList_default_instance_;
PROTOBUF_CONSTEXPR IntIntList::IntIntList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IntIntListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IntIntListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IntIntListDefaultTypeInternal() {}
  union {
    IntIntList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IntIntListDefaultTypeInternal _IntIntList_default_instance_;
PROTOBUF_CONSTEXPR LongIntList::LongIntList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LongIntListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LongIntListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LongIntListDefaultTypeInternal() {}
  union {
    LongIntList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LongIntListDefaultTypeInternal _LongIntList_default_instance_;
PROTOBUF_CONSTEXPR LongFloatList::LongFloatList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LongFloatListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LongFloatListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LongFloatListDefaultTypeInternal() {}
  union {
    LongFloatList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LongFloatListDefaultTypeInternal _LongFloatList_default_instance_;
PROTOBUF_CONSTEXPR FloatList::FloatList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FloatListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FloatListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FloatListDefaultTypeInternal() {}
  union {
    FloatList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FloatListDefaultTypeInternal _FloatList_default_instance_;
PROTOBUF_CONSTEXPR LongList::LongList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._value_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LongListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LongListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LongListDefaultTypeInternal() {}
  union {
    LongList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LongListDefaultTypeInternal _LongList_default_instance_;
PROTOBUF_CONSTEXPR IntList::IntList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._value_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IntListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IntListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IntListDefaultTypeInternal() {}
  union {
    IntList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IntListDefaultTypeInternal _IntList_default_instance_;
PROTOBUF_CONSTEXPR StrList::StrList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StrListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StrListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StrListDefaultTypeInternal() {}
  union {
    StrList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StrListDefaultTypeInternal _StrList_default_instance_;
PROTOBUF_CONSTEXPR UserActionList::UserActionList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserActionListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserActionListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserActionListDefaultTypeInternal() {}
  union {
    UserActionList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserActionListDefaultTypeInternal _UserActionList_default_instance_;
PROTOBUF_CONSTEXPR Item::Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collection_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.store_id_)*/int64_t{0}
  , /*decltype(_impl_.first_time_)*/int64_t{0}
  , /*decltype(_impl_.last_second_time_)*/int64_t{0}
  , /*decltype(_impl_.last_time_)*/int64_t{0}
  , /*decltype(_impl_.cnt_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ItemDefaultTypeInternal() {}
  union {
    Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ItemDefaultTypeInternal _Item_default_instance_;
PROTOBUF_CONSTEXPR RTUserActionList_ItemsEntry_DoNotUse::RTUserActionList_ItemsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct RTUserActionList_ItemsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RTUserActionList_ItemsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RTUserActionList_ItemsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    RTUserActionList_ItemsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RTUserActionList_ItemsEntry_DoNotUseDefaultTypeInternal _RTUserActionList_ItemsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR RTUserActionList::RTUserActionList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RTUserActionListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RTUserActionListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RTUserActionListDefaultTypeInternal() {}
  union {
    RTUserActionList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RTUserActionListDefaultTypeInternal _RTUserActionList_default_instance_;
PROTOBUF_CONSTEXPR ItemAction::ItemAction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.event_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.context_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.date_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cnt_)*/0
  , /*decltype(_impl_.dist_cnt_)*/0
  , /*decltype(_impl_.click_cnt_)*/0
  , /*decltype(_impl_.buy_cnt_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ItemActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ItemActionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ItemActionDefaultTypeInternal() {}
  union {
    ItemAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ItemActionDefaultTypeInternal _ItemAction_default_instance_;
PROTOBUF_CONSTEXPR ItemActionList::ItemActionList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ItemActionListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ItemActionListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ItemActionListDefaultTypeInternal() {}
  union {
    ItemActionList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ItemActionListDefaultTypeInternal _ItemActionList_default_instance_;
static ::_pb::Metadata file_level_metadata_features_2eproto[27];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_features_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_features_2eproto = nullptr;

const uint32_t TableStruct_features_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BatchFeatures, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::BatchFeatures, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::Features_ValueEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Features_ValueEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Features_ValueEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::Features_ValueEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Features, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Features, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::Features, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Feature, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Feature, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Feature, _impl_.kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserAction, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::UserAction, _impl_.first_time_),
  PROTOBUF_FIELD_OFFSET(::UserAction, _impl_.last_second_time_),
  PROTOBUF_FIELD_OFFSET(::UserAction, _impl_.last_time_),
  PROTOBUF_FIELD_OFFSET(::UserAction, _impl_.cnt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StrInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StrInt, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::StrInt, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StrFloat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StrFloat, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::StrFloat, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IntInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IntInt, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::IntInt, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IntFloat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IntFloat, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::IntFloat, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LongFloat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LongFloat, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::LongFloat, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LongInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LongInt, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::LongInt, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StrIntList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StrIntList, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StrFloatList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StrFloatList, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IntFloatList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IntFloatList, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IntIntList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IntIntList, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LongIntList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LongIntList, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LongFloatList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LongFloatList, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FloatList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FloatList, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LongList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LongList, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IntList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IntList, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StrList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StrList, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserActionList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserActionList, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Item, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::Item, _impl_.collection_id_),
  PROTOBUF_FIELD_OFFSET(::Item, _impl_.store_id_),
  PROTOBUF_FIELD_OFFSET(::Item, _impl_.first_time_),
  PROTOBUF_FIELD_OFFSET(::Item, _impl_.last_second_time_),
  PROTOBUF_FIELD_OFFSET(::Item, _impl_.last_time_),
  PROTOBUF_FIELD_OFFSET(::Item, _impl_.cnt_),
  PROTOBUF_FIELD_OFFSET(::RTUserActionList_ItemsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RTUserActionList_ItemsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RTUserActionList_ItemsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::RTUserActionList_ItemsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RTUserActionList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RTUserActionList, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ItemAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ItemAction, _impl_.event_),
  PROTOBUF_FIELD_OFFSET(::ItemAction, _impl_.context_),
  PROTOBUF_FIELD_OFFSET(::ItemAction, _impl_.cnt_),
  PROTOBUF_FIELD_OFFSET(::ItemAction, _impl_.dist_cnt_),
  PROTOBUF_FIELD_OFFSET(::ItemAction, _impl_.click_cnt_),
  PROTOBUF_FIELD_OFFSET(::ItemAction, _impl_.buy_cnt_),
  PROTOBUF_FIELD_OFFSET(::ItemAction, _impl_.date_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ItemActionList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ItemActionList, _impl_.value_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::BatchFeatures)},
  { 7, 15, -1, sizeof(::Features_ValueEntry_DoNotUse)},
  { 17, -1, -1, sizeof(::Features)},
  { 25, -1, -1, sizeof(::Feature)},
  { 49, -1, -1, sizeof(::UserAction)},
  { 60, -1, -1, sizeof(::StrInt)},
  { 68, -1, -1, sizeof(::StrFloat)},
  { 76, -1, -1, sizeof(::IntInt)},
  { 84, -1, -1, sizeof(::IntFloat)},
  { 92, -1, -1, sizeof(::LongFloat)},
  { 100, -1, -1, sizeof(::LongInt)},
  { 108, -1, -1, sizeof(::StrIntList)},
  { 115, -1, -1, sizeof(::StrFloatList)},
  { 122, -1, -1, sizeof(::IntFloatList)},
  { 129, -1, -1, sizeof(::IntIntList)},
  { 136, -1, -1, sizeof(::LongIntList)},
  { 143, -1, -1, sizeof(::LongFloatList)},
  { 150, -1, -1, sizeof(::FloatList)},
  { 157, -1, -1, sizeof(::LongList)},
  { 164, -1, -1, sizeof(::IntList)},
  { 171, -1, -1, sizeof(::StrList)},
  { 178, -1, -1, sizeof(::UserActionList)},
  { 185, -1, -1, sizeof(::Item)},
  { 198, 206, -1, sizeof(::RTUserActionList_ItemsEntry_DoNotUse)},
  { 208, -1, -1, sizeof(::RTUserActionList)},
  { 215, -1, -1, sizeof(::ItemAction)},
  { 228, -1, -1, sizeof(::ItemActionList)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_BatchFeatures_default_instance_._instance,
  &::_Features_ValueEntry_DoNotUse_default_instance_._instance,
  &::_Features_default_instance_._instance,
  &::_Feature_default_instance_._instance,
  &::_UserAction_default_instance_._instance,
  &::_StrInt_default_instance_._instance,
  &::_StrFloat_default_instance_._instance,
  &::_IntInt_default_instance_._instance,
  &::_IntFloat_default_instance_._instance,
  &::_LongFloat_default_instance_._instance,
  &::_LongInt_default_instance_._instance,
  &::_StrIntList_default_instance_._instance,
  &::_StrFloatList_default_instance_._instance,
  &::_IntFloatList_default_instance_._instance,
  &::_IntIntList_default_instance_._instance,
  &::_LongIntList_default_instance_._instance,
  &::_LongFloatList_default_instance_._instance,
  &::_FloatList_default_instance_._instance,
  &::_LongList_default_instance_._instance,
  &::_IntList_default_instance_._instance,
  &::_StrList_default_instance_._instance,
  &::_UserActionList_default_instance_._instance,
  &::_Item_default_instance_._instance,
  &::_RTUserActionList_ItemsEntry_DoNotUse_default_instance_._instance,
  &::_RTUserActionList_default_instance_._instance,
  &::_ItemAction_default_instance_._instance,
  &::_ItemActionList_default_instance_._instance,
};

const char descriptor_table_protodef_features_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016features.proto\")\n\rBatchFeatures\022\030\n\005val"
  "ue\030\001 \003(\0132\t.Features\"t\n\010Features\022\013\n\003key\030\001"
  " \001(\t\022#\n\005value\030\002 \003(\0132\024.Features.ValueEntr"
  "y\0326\n\nValueEntry\022\013\n\003key\030\001 \001(\t\022\027\n\005value\030\002 "
  "\001(\0132\010.Feature:\0028\001\"\340\004\n\007Feature\022#\n\014str_int"
  "_list\030\001 \001(\0132\013.StrIntListH\000\022\'\n\016str_float_"
  "list\030\002 \001(\0132\r.StrFloatListH\000\022#\n\014int_int_l"
  "ist\030\003 \001(\0132\013.IntIntListH\000\022\'\n\016int_float_li"
  "st\030\004 \001(\0132\r.IntFloatListH\000\022%\n\rlong_int_li"
  "st\030\005 \001(\0132\014.LongIntListH\000\022)\n\017long_float_l"
  "ist\030\006 \001(\0132\016.LongFloatListH\000\022\034\n\010str_list\030"
  "\007 \001(\0132\010.StrListH\000\022\034\n\010int_list\030\010 \001(\0132\010.In"
  "tListH\000\022\036\n\tlong_list\030\t \001(\0132\t.LongListH\000\022"
  " \n\nfloat_list\030\n \001(\0132\n.FloatListH\000\022+\n\020use"
  "r_action_list\030\013 \001(\0132\017.UserActionListH\000\0220"
  "\n\023rt_user_action_list\030\014 \001(\0132\021.RTUserActi"
  "onListH\000\022+\n\020item_action_list\030\r \001(\0132\017.Ite"
  "mActionListH\000\022\023\n\tstr_value\030\016 \001(\tH\000\022\025\n\013fl"
  "oat_value\030\017 \001(\002H\000\022\023\n\tint_value\030\020 \001(\005H\000\022\024"
  "\n\nlong_value\030\021 \001(\003H\000B\006\n\004kind\"k\n\nUserActi"
  "on\022\017\n\007item_id\030\001 \001(\t\022\022\n\nfirst_time\030\002 \001(\003\022"
  "\030\n\020last_second_time\030\003 \001(\003\022\021\n\tlast_time\030\004"
  " \001(\003\022\013\n\003cnt\030\005 \001(\005\"$\n\006StrInt\022\013\n\003key\030\001 \001(\t"
  "\022\r\n\005value\030\002 \001(\005\"&\n\010StrFloat\022\013\n\003key\030\001 \001(\t"
  "\022\r\n\005value\030\002 \001(\002\"$\n\006IntInt\022\013\n\003key\030\001 \001(\005\022\r"
  "\n\005value\030\002 \001(\005\"&\n\010IntFloat\022\013\n\003key\030\001 \001(\005\022\r"
  "\n\005value\030\002 \001(\002\"\'\n\tLongFloat\022\013\n\003key\030\001 \001(\003\022"
  "\r\n\005value\030\002 \001(\002\"%\n\007LongInt\022\013\n\003key\030\001 \001(\003\022\r"
  "\n\005value\030\002 \001(\005\"$\n\nStrIntList\022\026\n\005value\030\001 \003"
  "(\0132\007.StrInt\"(\n\014StrFloatList\022\030\n\005value\030\001 \003"
  "(\0132\t.StrFloat\"(\n\014IntFloatList\022\030\n\005value\030\001"
  " \003(\0132\t.IntFloat\"$\n\nIntIntList\022\026\n\005value\030\001"
  " \003(\0132\007.IntInt\"&\n\013LongIntList\022\027\n\005value\030\001 "
  "\003(\0132\010.LongInt\"*\n\rLongFloatList\022\031\n\005value\030"
  "\001 \003(\0132\n.LongFloat\"\036\n\tFloatList\022\021\n\005value\030"
  "\001 \003(\002B\002\020\001\"\035\n\010LongList\022\021\n\005value\030\001 \003(\003B\002\020\001"
  "\"\034\n\007IntList\022\021\n\005value\030\001 \003(\005B\002\020\001\"\030\n\007StrLis"
  "t\022\r\n\005value\030\001 \003(\t\",\n\016UserActionList\022\032\n\005va"
  "lue\030\001 \003(\0132\013.UserAction\"\216\001\n\004Item\022\017\n\007item_"
  "id\030\001 \001(\t\022\025\n\rcollection_id\030\002 \001(\t\022\020\n\010store"
  "_id\030\003 \001(\003\022\022\n\nfirst_time\030\004 \001(\003\022\030\n\020last_se"
  "cond_time\030\005 \001(\003\022\021\n\tlast_time\030\006 \001(\003\022\013\n\003cn"
  "t\030\007 \001(\003\"t\n\020RTUserActionList\022+\n\005items\030\001 \003"
  "(\0132\034.RTUserActionList.ItemsEntry\0323\n\nItem"
  "sEntry\022\013\n\003key\030\001 \001(\t\022\024\n\005value\030\002 \001(\0132\005.Ite"
  "m:\0028\001\"}\n\nItemAction\022\r\n\005event\030\001 \001(\t\022\017\n\007co"
  "ntext\030\002 \001(\t\022\013\n\003cnt\030\003 \001(\005\022\020\n\010dist_cnt\030\004 \001"
  "(\005\022\021\n\tclick_cnt\030\005 \001(\005\022\017\n\007buy_cnt\030\006 \001(\005\022\014"
  "\n\004date\030\007 \001(\t\",\n\016ItemActionList\022\032\n\005value\030"
  "\001 \003(\0132\013.ItemActionb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_features_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_features_2eproto = {
    false, false, 1986, descriptor_table_protodef_features_2eproto,
    "features.proto",
    &descriptor_table_features_2eproto_once, nullptr, 0, 27,
    schemas, file_default_instances, TableStruct_features_2eproto::offsets,
    file_level_metadata_features_2eproto, file_level_enum_descriptors_features_2eproto,
    file_level_service_descriptors_features_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_features_2eproto_getter() {
  return &descriptor_table_features_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_features_2eproto(&descriptor_table_features_2eproto);

// ===================================================================

class BatchFeatures::_Internal {
 public:
};

BatchFeatures::BatchFeatures(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:BatchFeatures)
}
BatchFeatures::BatchFeatures(const BatchFeatures& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BatchFeatures* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){from._impl_.value_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BatchFeatures)
}

inline void BatchFeatures::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BatchFeatures::~BatchFeatures() {
  // @@protoc_insertion_point(destructor:BatchFeatures)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BatchFeatures::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.~RepeatedPtrField();
}

void BatchFeatures::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BatchFeatures::Clear() {
// @@protoc_insertion_point(message_clear_start:BatchFeatures)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchFeatures::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Features value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BatchFeatures::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BatchFeatures)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Features value = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_value_size()); i < n; i++) {
    const auto& repfield = this->_internal_value(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BatchFeatures)
  return target;
}

size_t BatchFeatures::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BatchFeatures)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Features value = 1;
  total_size += 1UL * this->_internal_value_size();
  for (const auto& msg : this->_impl_.value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchFeatures::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BatchFeatures::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchFeatures::GetClassData() const { return &_class_data_; }


void BatchFeatures::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BatchFeatures*>(&to_msg);
  auto& from = static_cast<const BatchFeatures&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:BatchFeatures)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.value_.MergeFrom(from._impl_.value_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchFeatures::CopyFrom(const BatchFeatures& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BatchFeatures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchFeatures::IsInitialized() const {
  return true;
}

void BatchFeatures::InternalSwap(BatchFeatures* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.value_.InternalSwap(&other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchFeatures::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_features_2eproto_getter, &descriptor_table_features_2eproto_once,
      file_level_metadata_features_2eproto[0]);
}

// ===================================================================

Features_ValueEntry_DoNotUse::Features_ValueEntry_DoNotUse() {}
Features_ValueEntry_DoNotUse::Features_ValueEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Features_ValueEntry_DoNotUse::MergeFrom(const Features_ValueEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Features_ValueEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_features_2eproto_getter, &descriptor_table_features_2eproto_once,
      file_level_metadata_features_2eproto[1]);
}

// ===================================================================

class Features::_Internal {
 public:
};

Features::Features(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Features::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:Features)
}
Features::Features(const Features& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Features* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.value_)*/{}
    , decltype(_impl_.key_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.value_.MergeFrom(from._impl_.value_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Features)
}

inline void Features::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.value_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.key_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Features::~Features() {
  // @@protoc_insertion_point(destructor:Features)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Features::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.Destruct();
  _impl_.value_.~MapField();
  _impl_.key_.Destroy();
}

void Features::ArenaDtor(void* object) {
  Features* _this = reinterpret_cast< Features* >(object);
  _this->_impl_.value_.Destruct();
}
void Features::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Features::Clear() {
// @@protoc_insertion_point(message_clear_start:Features)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.Clear();
  _impl_.key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Features::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Features.key"));
        } else
          goto handle_unusual;
        continue;
      // map<string, .Feature> value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.value_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Features::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Features)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Features.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // map<string, .Feature> value = 2;
  if (!this->_internal_value().empty()) {
    using MapType = ::_pb::Map<std::string, ::Feature>;
    using WireHelper = Features_ValueEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_value();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "Features.ValueEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Features)
  return target;
}

size_t Features::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Features)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .Feature> value = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_value_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Feature >::const_iterator
      it = this->_internal_value().begin();
      it != this->_internal_value().end(); ++it) {
    total_size += Features_ValueEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Features::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Features::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Features::GetClassData() const { return &_class_data_; }


void Features::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Features*>(&to_msg);
  auto& from = static_cast<const Features&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Features)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.value_.MergeFrom(from._impl_.value_);
  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Features::CopyFrom(const Features& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Features)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Features::IsInitialized() const {
  return true;
}

void Features::InternalSwap(Features* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.value_.InternalSwap(&other->_impl_.value_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Features::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_features_2eproto_getter, &descriptor_table_features_2eproto_once,
      file_level_metadata_features_2eproto[2]);
}

// ===================================================================

class Feature::_Internal {
 public:
  static const ::StrIntList& str_int_list(const Feature* msg);
  static const ::StrFloatList& str_float_list(const Feature* msg);
  static const ::IntIntList& int_int_list(const Feature* msg);
  static const ::IntFloatList& int_float_list(const Feature* msg);
  static const ::LongIntList& long_int_list(const Feature* msg);
  static const ::LongFloatList& long_float_list(const Feature* msg);
  static const ::StrList& str_list(const Feature* msg);
  static const ::IntList& int_list(const Feature* msg);
  static const ::LongList& long_list(const Feature* msg);
  static const ::FloatList& float_list(const Feature* msg);
  static const ::UserActionList& user_action_list(const Feature* msg);
  static const ::RTUserActionList& rt_user_action_list(const Feature* msg);
  static const ::ItemActionList& item_action_list(const Feature* msg);
};

const ::StrIntList&
Feature::_Internal::str_int_list(const Feature* msg) {
  return *msg->_impl_.kind_.str_int_list_;
}
const ::StrFloatList&
Feature::_Internal::str_float_list(const Feature* msg) {
  return *msg->_impl_.kind_.str_float_list_;
}
const ::IntIntList&
Feature::_Internal::int_int_list(const Feature* msg) {
  return *msg->_impl_.kind_.int_int_list_;
}
const ::IntFloatList&
Feature::_Internal::int_float_list(const Feature* msg) {
  return *msg->_impl_.kind_.int_float_list_;
}
const ::LongIntList&
Feature::_Internal::long_int_list(const Feature* msg) {
  return *msg->_impl_.kind_.long_int_list_;
}
const ::LongFloatList&
Feature::_Internal::long_float_list(const Feature* msg) {
  return *msg->_impl_.kind_.long_float_list_;
}
const ::StrList&
Feature::_Internal::str_list(const Feature* msg) {
  return *msg->_impl_.kind_.str_list_;
}
const ::IntList&
Feature::_Internal::int_list(const Feature* msg) {
  return *msg->_impl_.kind_.int_list_;
}
const ::LongList&
Feature::_Internal::long_list(const Feature* msg) {
  return *msg->_impl_.kind_.long_list_;
}
const ::FloatList&
Feature::_Internal::float_list(const Feature* msg) {
  return *msg->_impl_.kind_.float_list_;
}
const ::UserActionList&
Feature::_Internal::user_action_list(const Feature* msg) {
  return *msg->_impl_.kind_.user_action_list_;
}
const ::RTUserActionList&
Feature::_Internal::rt_user_action_list(const Feature* msg) {
  return *msg->_impl_.kind_.rt_user_action_list_;
}
const ::ItemActionList&
Feature::_Internal::item_action_list(const Feature* msg) {
  return *msg->_impl_.kind_.item_action_list_;
}
void Feature::set_allocated_str_int_list(::StrIntList* str_int_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (str_int_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(str_int_list);
    if (message_arena != submessage_arena) {
      str_int_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, str_int_list, submessage_arena);
    }
    set_has_str_int_list();
    _impl_.kind_.str_int_list_ = str_int_list;
  }
  // @@protoc_insertion_point(field_set_allocated:Feature.str_int_list)
}
void Feature::set_allocated_str_float_list(::StrFloatList* str_float_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (str_float_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(str_float_list);
    if (message_arena != submessage_arena) {
      str_float_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, str_float_list, submessage_arena);
    }
    set_has_str_float_list();
    _impl_.kind_.str_float_list_ = str_float_list;
  }
  // @@protoc_insertion_point(field_set_allocated:Feature.str_float_list)
}
void Feature::set_allocated_int_int_list(::IntIntList* int_int_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (int_int_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(int_int_list);
    if (message_arena != submessage_arena) {
      int_int_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, int_int_list, submessage_arena);
    }
    set_has_int_int_list();
    _impl_.kind_.int_int_list_ = int_int_list;
  }
  // @@protoc_insertion_point(field_set_allocated:Feature.int_int_list)
}
void Feature::set_allocated_int_float_list(::IntFloatList* int_float_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (int_float_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(int_float_list);
    if (message_arena != submessage_arena) {
      int_float_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, int_float_list, submessage_arena);
    }
    set_has_int_float_list();
    _impl_.kind_.int_float_list_ = int_float_list;
  }
  // @@protoc_insertion_point(field_set_allocated:Feature.int_float_list)
}
void Feature::set_allocated_long_int_list(::LongIntList* long_int_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (long_int_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(long_int_list);
    if (message_arena != submessage_arena) {
      long_int_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, long_int_list, submessage_arena);
    }
    set_has_long_int_list();
    _impl_.kind_.long_int_list_ = long_int_list;
  }
  // @@protoc_insertion_point(field_set_allocated:Feature.long_int_list)
}
void Feature::set_allocated_long_float_list(::LongFloatList* long_float_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (long_float_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(long_float_list);
    if (message_arena != submessage_arena) {
      long_float_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, long_float_list, submessage_arena);
    }
    set_has_long_float_list();
    _impl_.kind_.long_float_list_ = long_float_list;
  }
  // @@protoc_insertion_point(field_set_allocated:Feature.long_float_list)
}
void Feature::set_allocated_str_list(::StrList* str_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (str_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(str_list);
    if (message_arena != submessage_arena) {
      str_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, str_list, submessage_arena);
    }
    set_has_str_list();
    _impl_.kind_.str_list_ = str_list;
  }
  // @@protoc_insertion_point(field_set_allocated:Feature.str_list)
}
void Feature::set_allocated_int_list(::IntList* int_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (int_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(int_list);
    if (message_arena != submessage_arena) {
      int_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, int_list, submessage_arena);
    }
    set_has_int_list();
    _impl_.kind_.int_list_ = int_list;
  }
  // @@protoc_insertion_point(field_set_allocated:Feature.int_list)
}
void Feature::set_allocated_long_list(::LongList* long_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (long_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(long_list);
    if (message_arena != submessage_arena) {
      long_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, long_list, submessage_arena);
    }
    set_has_long_list();
    _impl_.kind_.long_list_ = long_list;
  }
  // @@protoc_insertion_point(field_set_allocated:Feature.long_list)
}
void Feature::set_allocated_float_list(::FloatList* float_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (float_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(float_list);
    if (message_arena != submessage_arena) {
      float_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, float_list, submessage_arena);
    }
    set_has_float_list();
    _impl_.kind_.float_list_ = float_list;
  }
  // @@protoc_insertion_point(field_set_allocated:Feature.float_list)
}
void Feature::set_allocated_user_action_list(::UserActionList* user_action_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (user_action_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user_action_list);
    if (message_arena != submessage_arena) {
      user_action_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_action_list, submessage_arena);
    }
    set_has_user_action_list();
    _impl_.kind_.user_action_list_ = user_action_list;
  }
  // @@protoc_insertion_point(field_set_allocated:Feature.user_action_list)
}
void Feature::set_allocated_rt_user_action_list(::RTUserActionList* rt_user_action_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (rt_user_action_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rt_user_action_list);
    if (message_arena != submessage_arena) {
      rt_user_action_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rt_user_action_list, submessage_arena);
    }
    set_has_rt_user_action_list();
    _impl_.kind_.rt_user_action_list_ = rt_user_action_list;
  }
  // @@protoc_insertion_point(field_set_allocated:Feature.rt_user_action_list)
}
void Feature::set_allocated_item_action_list(::ItemActionList* item_action_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (item_action_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(item_action_list);
    if (message_arena != submessage_arena) {
      item_action_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item_action_list, submessage_arena);
    }
    set_has_item_action_list();
    _impl_.kind_.item_action_list_ = item_action_list;
  }
  // @@protoc_insertion_point(field_set_allocated:Feature.item_action_list)
}
Feature::Feature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Feature)
}
Feature::Feature(const Feature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Feature* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.kind_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_kind();
  switch (from.kind_case()) {
    case kStrIntList: {
      _this->_internal_mutable_str_int_list()->::StrIntList::MergeFrom(
          from._internal_str_int_list());
      break;
    }
    case kStrFloatList: {
      _this->_internal_mutable_str_float_list()->::StrFloatList::MergeFrom(
          from._internal_str_float_list());
      break;
    }
    case kIntIntList: {
      _this->_internal_mutable_int_int_list()->::IntIntList::MergeFrom(
          from._internal_int_int_list());
      break;
    }
    case kIntFloatList: {
      _this->_internal_mutable_int_float_list()->::IntFloatList::MergeFrom(
          from._internal_int_float_list());
      break;
    }
    case kLongIntList: {
      _this->_internal_mutable_long_int_list()->::LongIntList::MergeFrom(
          from._internal_long_int_list());
      break;
    }
    case kLongFloatList: {
      _this->_internal_mutable_long_float_list()->::LongFloatList::MergeFrom(
          from._internal_long_float_list());
      break;
    }
    case kStrList: {
      _this->_internal_mutable_str_list()->::StrList::MergeFrom(
          from._internal_str_list());
      break;
    }
    case kIntList: {
      _this->_internal_mutable_int_list()->::IntList::MergeFrom(
          from._internal_int_list());
      break;
    }
    case kLongList: {
      _this->_internal_mutable_long_list()->::LongList::MergeFrom(
          from._internal_long_list());
      break;
    }
    case kFloatList: {
      _this->_internal_mutable_float_list()->::FloatList::MergeFrom(
          from._internal_float_list());
      break;
    }
    case kUserActionList: {
      _this->_internal_mutable_user_action_list()->::UserActionList::MergeFrom(
          from._internal_user_action_list());
      break;
    }
    case kRtUserActionList: {
      _this->_internal_mutable_rt_user_action_list()->::RTUserActionList::MergeFrom(
          from._internal_rt_user_action_list());
      break;
    }
    case kItemActionList: {
      _this->_internal_mutable_item_action_list()->::ItemActionList::MergeFrom(
          from._internal_item_action_list());
      break;
    }
    case kStrValue: {
      _this->_internal_set_str_value(from._internal_str_value());
      break;
    }
    case kFloatValue: {
      _this->_internal_set_float_value(from._internal_float_value());
      break;
    }
    case kIntValue: {
      _this->_internal_set_int_value(from._internal_int_value());
      break;
    }
    case kLongValue: {
      _this->_internal_set_long_value(from._internal_long_value());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Feature)
}

inline void Feature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.kind_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_kind();
}

Feature::~Feature() {
  // @@protoc_insertion_point(destructor:Feature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Feature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_kind()) {
    clear_kind();
  }
}

void Feature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Feature::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:Feature)
  switch (kind_case()) {
    case kStrIntList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.str_int_list_;
      }
      break;
    }
    case kStrFloatList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.str_float_list_;
      }
      break;
    }
    case kIntIntList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.int_int_list_;
      }
      break;
    }
    case kIntFloatList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.int_float_list_;
      }
      break;
    }
    case kLongIntList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.long_int_list_;
      }
      break;
    }
    case kLongFloatList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.long_float_list_;
      }
      break;
    }
    case kStrList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.str_list_;
      }
      break;
    }
    case kIntList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.int_list_;
      }
      break;
    }
    case kLongList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.long_list_;
      }
      break;
    }
    case kFloatList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.float_list_;
      }
      break;
    }
    case kUserActionList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.user_action_list_;
      }
      break;
    }
    case kRtUserActionList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.rt_user_action_list_;
      }
      break;
    }
    case kItemActionList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.item_action_list_;
      }
      break;
    }
    case kStrValue: {
      _impl_.kind_.str_value_.Destroy();
      break;
    }
    case kFloatValue: {
      // No need to clear
      break;
    }
    case kIntValue: {
      // No need to clear
      break;
    }
    case kLongValue: {
      // No need to clear
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = KIND_NOT_SET;
}


void Feature::Clear() {
// @@protoc_insertion_point(message_clear_start:Feature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_kind();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Feature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .StrIntList str_int_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_str_int_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .StrFloatList str_float_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_str_float_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IntIntList int_int_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_int_int_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IntFloatList int_float_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_int_float_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .LongIntList long_int_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_long_int_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .LongFloatList long_float_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_long_float_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .StrList str_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_str_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IntList int_list = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_int_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .LongList long_list = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_long_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .FloatList float_list = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_float_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .UserActionList user_action_list = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_action_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .RTUserActionList rt_user_action_list = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_rt_user_action_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ItemActionList item_action_list = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_item_action_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string str_value = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_str_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Feature.str_value"));
        } else
          goto handle_unusual;
        continue;
      // float float_value = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _internal_set_float_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 int_value = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _internal_set_int_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 long_value = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _internal_set_long_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Feature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Feature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .StrIntList str_int_list = 1;
  if (_internal_has_str_int_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::str_int_list(this),
        _Internal::str_int_list(this).GetCachedSize(), target, stream);
  }

  // .StrFloatList str_float_list = 2;
  if (_internal_has_str_float_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::str_float_list(this),
        _Internal::str_float_list(this).GetCachedSize(), target, stream);
  }

  // .IntIntList int_int_list = 3;
  if (_internal_has_int_int_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::int_int_list(this),
        _Internal::int_int_list(this).GetCachedSize(), target, stream);
  }

  // .IntFloatList int_float_list = 4;
  if (_internal_has_int_float_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::int_float_list(this),
        _Internal::int_float_list(this).GetCachedSize(), target, stream);
  }

  // .LongIntList long_int_list = 5;
  if (_internal_has_long_int_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::long_int_list(this),
        _Internal::long_int_list(this).GetCachedSize(), target, stream);
  }

  // .LongFloatList long_float_list = 6;
  if (_internal_has_long_float_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::long_float_list(this),
        _Internal::long_float_list(this).GetCachedSize(), target, stream);
  }

  // .StrList str_list = 7;
  if (_internal_has_str_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::str_list(this),
        _Internal::str_list(this).GetCachedSize(), target, stream);
  }

  // .IntList int_list = 8;
  if (_internal_has_int_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::int_list(this),
        _Internal::int_list(this).GetCachedSize(), target, stream);
  }

  // .LongList long_list = 9;
  if (_internal_has_long_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::long_list(this),
        _Internal::long_list(this).GetCachedSize(), target, stream);
  }

  // .FloatList float_list = 10;
  if (_internal_has_float_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::float_list(this),
        _Internal::float_list(this).GetCachedSize(), target, stream);
  }

  // .UserActionList user_action_list = 11;
  if (_internal_has_user_action_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::user_action_list(this),
        _Internal::user_action_list(this).GetCachedSize(), target, stream);
  }

  // .RTUserActionList rt_user_action_list = 12;
  if (_internal_has_rt_user_action_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::rt_user_action_list(this),
        _Internal::rt_user_action_list(this).GetCachedSize(), target, stream);
  }

  // .ItemActionList item_action_list = 13;
  if (_internal_has_item_action_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::item_action_list(this),
        _Internal::item_action_list(this).GetCachedSize(), target, stream);
  }

  // string str_value = 14;
  if (_internal_has_str_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_str_value().data(), static_cast<int>(this->_internal_str_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Feature.str_value");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_str_value(), target);
  }

  // float float_value = 15;
  if (_internal_has_float_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_float_value(), target);
  }

  // int32 int_value = 16;
  if (_internal_has_int_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_int_value(), target);
  }

  // int64 long_value = 17;
  if (_internal_has_long_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(17, this->_internal_long_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Feature)
  return target;
}

size_t Feature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Feature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (kind_case()) {
    // .StrIntList str_int_list = 1;
    case kStrIntList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.str_int_list_);
      break;
    }
    // .StrFloatList str_float_list = 2;
    case kStrFloatList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.str_float_list_);
      break;
    }
    // .IntIntList int_int_list = 3;
    case kIntIntList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.int_int_list_);
      break;
    }
    // .IntFloatList int_float_list = 4;
    case kIntFloatList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.int_float_list_);
      break;
    }
    // .LongIntList long_int_list = 5;
    case kLongIntList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.long_int_list_);
      break;
    }
    // .LongFloatList long_float_list = 6;
    case kLongFloatList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.long_float_list_);
      break;
    }
    // .StrList str_list = 7;
    case kStrList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.str_list_);
      break;
    }
    // .IntList int_list = 8;
    case kIntList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.int_list_);
      break;
    }
    // .LongList long_list = 9;
    case kLongList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.long_list_);
      break;
    }
    // .FloatList float_list = 10;
    case kFloatList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.float_list_);
      break;
    }
    // .UserActionList user_action_list = 11;
    case kUserActionList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.user_action_list_);
      break;
    }
    // .RTUserActionList rt_user_action_list = 12;
    case kRtUserActionList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.rt_user_action_list_);
      break;
    }
    // .ItemActionList item_action_list = 13;
    case kItemActionList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.item_action_list_);
      break;
    }
    // string str_value = 14;
    case kStrValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str_value());
      break;
    }
    // float float_value = 15;
    case kFloatValue: {
      total_size += 1 + 4;
      break;
    }
    // int32 int_value = 16;
    case kIntValue: {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_int_value());
      break;
    }
    // int64 long_value = 17;
    case kLongValue: {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_long_value());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Feature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Feature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Feature::GetClassData() const { return &_class_data_; }


void Feature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Feature*>(&to_msg);
  auto& from = static_cast<const Feature&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Feature)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.kind_case()) {
    case kStrIntList: {
      _this->_internal_mutable_str_int_list()->::StrIntList::MergeFrom(
          from._internal_str_int_list());
      break;
    }
    case kStrFloatList: {
      _this->_internal_mutable_str_float_list()->::StrFloatList::MergeFrom(
          from._internal_str_float_list());
      break;
    }
    case kIntIntList: {
      _this->_internal_mutable_int_int_list()->::IntIntList::MergeFrom(
          from._internal_int_int_list());
      break;
    }
    case kIntFloatList: {
      _this->_internal_mutable_int_float_list()->::IntFloatList::MergeFrom(
          from._internal_int_float_list());
      break;
    }
    case kLongIntList: {
      _this->_internal_mutable_long_int_list()->::LongIntList::MergeFrom(
          from._internal_long_int_list());
      break;
    }
    case kLongFloatList: {
      _this->_internal_mutable_long_float_list()->::LongFloatList::MergeFrom(
          from._internal_long_float_list());
      break;
    }
    case kStrList: {
      _this->_internal_mutable_str_list()->::StrList::MergeFrom(
          from._internal_str_list());
      break;
    }
    case kIntList: {
      _this->_internal_mutable_int_list()->::IntList::MergeFrom(
          from._internal_int_list());
      break;
    }
    case kLongList: {
      _this->_internal_mutable_long_list()->::LongList::MergeFrom(
          from._internal_long_list());
      break;
    }
    case kFloatList: {
      _this->_internal_mutable_float_list()->::FloatList::MergeFrom(
          from._internal_float_list());
      break;
    }
    case kUserActionList: {
      _this->_internal_mutable_user_action_list()->::UserActionList::MergeFrom(
          from._internal_user_action_list());
      break;
    }
    case kRtUserActionList: {
      _this->_internal_mutable_rt_user_action_list()->::RTUserActionList::MergeFrom(
          from._internal_rt_user_action_list());
      break;
    }
    case kItemActionList: {
      _this->_internal_mutable_item_action_list()->::ItemActionList::MergeFrom(
          from._internal_item_action_list());
      break;
    }
    case kStrValue: {
      _this->_internal_set_str_value(from._internal_str_value());
      break;
    }
    case kFloatValue: {
      _this->_internal_set_float_value(from._internal_float_value());
      break;
    }
    case kIntValue: {
      _this->_internal_set_int_value(from._internal_int_value());
      break;
    }
    case kLongValue: {
      _this->_internal_set_long_value(from._internal_long_value());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Feature::CopyFrom(const Feature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Feature::IsInitialized() const {
  return true;
}

void Feature::InternalSwap(Feature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.kind_, other->_impl_.kind_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Feature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_features_2eproto_getter, &descriptor_table_features_2eproto_once,
      file_level_metadata_features_2eproto[3]);
}

// ===================================================================

class UserAction::_Internal {
 public:
};

UserAction::UserAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:UserAction)
}
UserAction::UserAction(const UserAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserAction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_id_){}
    , decltype(_impl_.first_time_){}
    , decltype(_impl_.last_second_time_){}
    , decltype(_impl_.last_time_){}
    , decltype(_impl_.cnt_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.item_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.item_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_item_id().empty()) {
    _this->_impl_.item_id_.Set(from._internal_item_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.first_time_, &from._impl_.first_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cnt_) -
    reinterpret_cast<char*>(&_impl_.first_time_)) + sizeof(_impl_.cnt_));
  // @@protoc_insertion_point(copy_constructor:UserAction)
}

inline void UserAction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_id_){}
    , decltype(_impl_.first_time_){int64_t{0}}
    , decltype(_impl_.last_second_time_){int64_t{0}}
    , decltype(_impl_.last_time_){int64_t{0}}
    , decltype(_impl_.cnt_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.item_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.item_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserAction::~UserAction() {
  // @@protoc_insertion_point(destructor:UserAction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.item_id_.Destroy();
}

void UserAction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserAction::Clear() {
// @@protoc_insertion_point(message_clear_start:UserAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item_id_.ClearToEmpty();
  ::memset(&_impl_.first_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cnt_) -
      reinterpret_cast<char*>(&_impl_.first_time_)) + sizeof(_impl_.cnt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserAction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_item_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "UserAction.item_id"));
        } else
          goto handle_unusual;
        continue;
      // int64 first_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.first_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 last_second_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.last_second_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 last_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.last_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cnt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string item_id = 1;
  if (!this->_internal_item_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_item_id().data(), static_cast<int>(this->_internal_item_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UserAction.item_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_item_id(), target);
  }

  // int64 first_time = 2;
  if (this->_internal_first_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_first_time(), target);
  }

  // int64 last_second_time = 3;
  if (this->_internal_last_second_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_last_second_time(), target);
  }

  // int64 last_time = 4;
  if (this->_internal_last_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_last_time(), target);
  }

  // int32 cnt = 5;
  if (this->_internal_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_cnt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserAction)
  return target;
}

size_t UserAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserAction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string item_id = 1;
  if (!this->_internal_item_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_item_id());
  }

  // int64 first_time = 2;
  if (this->_internal_first_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_first_time());
  }

  // int64 last_second_time = 3;
  if (this->_internal_last_second_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_second_time());
  }

  // int64 last_time = 4;
  if (this->_internal_last_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_time());
  }

  // int32 cnt = 5;
  if (this->_internal_cnt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cnt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserAction::GetClassData() const { return &_class_data_; }


void UserAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserAction*>(&to_msg);
  auto& from = static_cast<const UserAction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:UserAction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_item_id().empty()) {
    _this->_internal_set_item_id(from._internal_item_id());
  }
  if (from._internal_first_time() != 0) {
    _this->_internal_set_first_time(from._internal_first_time());
  }
  if (from._internal_last_second_time() != 0) {
    _this->_internal_set_last_second_time(from._internal_last_second_time());
  }
  if (from._internal_last_time() != 0) {
    _this->_internal_set_last_time(from._internal_last_time());
  }
  if (from._internal_cnt() != 0) {
    _this->_internal_set_cnt(from._internal_cnt());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserAction::CopyFrom(const UserAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserAction::IsInitialized() const {
  return true;
}

void UserAction::InternalSwap(UserAction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.item_id_, lhs_arena,
      &other->_impl_.item_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserAction, _impl_.cnt_)
      + sizeof(UserAction::_impl_.cnt_)
      - PROTOBUF_FIELD_OFFSET(UserAction, _impl_.first_time_)>(
          reinterpret_cast<char*>(&_impl_.first_time_),
          reinterpret_cast<char*>(&other->_impl_.first_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserAction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_features_2eproto_getter, &descriptor_table_features_2eproto_once,
      file_level_metadata_features_2eproto[4]);
}

// ===================================================================

class StrInt::_Internal {
 public:
};

StrInt::StrInt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:StrInt)
}
StrInt::StrInt(const StrInt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StrInt* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:StrInt)
}

inline void StrInt::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StrInt::~StrInt() {
  // @@protoc_insertion_point(destructor:StrInt)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StrInt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
}

void StrInt::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StrInt::Clear() {
// @@protoc_insertion_point(message_clear_start:StrInt)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StrInt::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "StrInt.key"));
        } else
          goto handle_unusual;
        continue;
      // int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StrInt::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StrInt)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StrInt.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StrInt)
  return target;
}

size_t StrInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StrInt)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StrInt::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StrInt::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StrInt::GetClassData() const { return &_class_data_; }


void StrInt::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StrInt*>(&to_msg);
  auto& from = static_cast<const StrInt&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:StrInt)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StrInt::CopyFrom(const StrInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StrInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrInt::IsInitialized() const {
  return true;
}

void StrInt::InternalSwap(StrInt* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StrInt::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_features_2eproto_getter, &descriptor_table_features_2eproto_once,
      file_level_metadata_features_2eproto[5]);
}

// ===================================================================

class StrFloat::_Internal {
 public:
};

StrFloat::StrFloat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:StrFloat)
}
StrFloat::StrFloat(const StrFloat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StrFloat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:StrFloat)
}

inline void StrFloat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StrFloat::~StrFloat() {
  // @@protoc_insertion_point(destructor:StrFloat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StrFloat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
}

void StrFloat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StrFloat::Clear() {
// @@protoc_insertion_point(message_clear_start:StrFloat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StrFloat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "StrFloat.key"));
        } else
          goto handle_unusual;
        continue;
      // float value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StrFloat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StrFloat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StrFloat.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // float value = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StrFloat)
  return target;
}

size_t StrFloat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StrFloat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // float value = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StrFloat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StrFloat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StrFloat::GetClassData() const { return &_class_data_; }


void StrFloat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StrFloat*>(&to_msg);
  auto& from = static_cast<const StrFloat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:StrFloat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = from._internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StrFloat::CopyFrom(const StrFloat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StrFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrFloat::IsInitialized() const {
  return true;
}

void StrFloat::InternalSwap(StrFloat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StrFloat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_features_2eproto_getter, &descriptor_table_features_2eproto_once,
      file_level_metadata_features_2eproto[6]);
}

// ===================================================================

class IntInt::_Internal {
 public:
};

IntInt::IntInt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IntInt)
}
IntInt::IntInt(const IntInt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IntInt* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.key_, &from._impl_.key_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.value_) -
    reinterpret_cast<char*>(&_impl_.key_)) + sizeof(_impl_.value_));
  // @@protoc_insertion_point(copy_constructor:IntInt)
}

inline void IntInt::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){0}
    , decltype(_impl_.value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IntInt::~IntInt() {
  // @@protoc_insertion_point(destructor:IntInt)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IntInt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IntInt::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IntInt::Clear() {
// @@protoc_insertion_point(message_clear_start:IntInt)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.value_) -
      reinterpret_cast<char*>(&_impl_.key_)) + sizeof(_impl_.value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntInt::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IntInt::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IntInt)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 key = 1;
  if (this->_internal_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_key(), target);
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IntInt)
  return target;
}

size_t IntInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IntInt)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 key = 1;
  if (this->_internal_key() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_key());
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IntInt::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IntInt::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IntInt::GetClassData() const { return &_class_data_; }


void IntInt::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IntInt*>(&to_msg);
  auto& from = static_cast<const IntInt&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:IntInt)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_key() != 0) {
    _this->_internal_set_key(from._internal_key());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IntInt::CopyFrom(const IntInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IntInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntInt::IsInitialized() const {
  return true;
}

void IntInt::InternalSwap(IntInt* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IntInt, _impl_.value_)
      + sizeof(IntInt::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(IntInt, _impl_.key_)>(
          reinterpret_cast<char*>(&_impl_.key_),
          reinterpret_cast<char*>(&other->_impl_.key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IntInt::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_features_2eproto_getter, &descriptor_table_features_2eproto_once,
      file_level_metadata_features_2eproto[7]);
}

// ===================================================================

class IntFloat::_Internal {
 public:
};

IntFloat::IntFloat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IntFloat)
}
IntFloat::IntFloat(const IntFloat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IntFloat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.key_, &from._impl_.key_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.value_) -
    reinterpret_cast<char*>(&_impl_.key_)) + sizeof(_impl_.value_));
  // @@protoc_insertion_point(copy_constructor:IntFloat)
}

inline void IntFloat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){0}
    , decltype(_impl_.value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IntFloat::~IntFloat() {
  // @@protoc_insertion_point(destructor:IntFloat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IntFloat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IntFloat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IntFloat::Clear() {
// @@protoc_insertion_point(message_clear_start:IntFloat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.value_) -
      reinterpret_cast<char*>(&_impl_.key_)) + sizeof(_impl_.value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntFloat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IntFloat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IntFloat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 key = 1;
  if (this->_internal_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_key(), target);
  }

  // float value = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IntFloat)
  return target;
}

size_t IntFloat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IntFloat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 key = 1;
  if (this->_internal_key() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_key());
  }

  // float value = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IntFloat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IntFloat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IntFloat::GetClassData() const { return &_class_data_; }


void IntFloat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IntFloat*>(&to_msg);
  auto& from = static_cast<const IntFloat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:IntFloat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_key() != 0) {
    _this->_internal_set_key(from._internal_key());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = from._internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IntFloat::CopyFrom(const IntFloat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IntFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntFloat::IsInitialized() const {
  return true;
}

void IntFloat::InternalSwap(IntFloat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IntFloat, _impl_.value_)
      + sizeof(IntFloat::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(IntFloat, _impl_.key_)>(
          reinterpret_cast<char*>(&_impl_.key_),
          reinterpret_cast<char*>(&other->_impl_.key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IntFloat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_features_2eproto_getter, &descriptor_table_features_2eproto_once,
      file_level_metadata_features_2eproto[8]);
}

// ===================================================================

class LongFloat::_Internal {
 public:
};

LongFloat::LongFloat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LongFloat)
}
LongFloat::LongFloat(const LongFloat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LongFloat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.key_, &from._impl_.key_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.value_) -
    reinterpret_cast<char*>(&_impl_.key_)) + sizeof(_impl_.value_));
  // @@protoc_insertion_point(copy_constructor:LongFloat)
}

inline void LongFloat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){int64_t{0}}
    , decltype(_impl_.value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LongFloat::~LongFloat() {
  // @@protoc_insertion_point(destructor:LongFloat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LongFloat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LongFloat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LongFloat::Clear() {
// @@protoc_insertion_point(message_clear_start:LongFloat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.value_) -
      reinterpret_cast<char*>(&_impl_.key_)) + sizeof(_impl_.value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LongFloat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LongFloat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LongFloat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 key = 1;
  if (this->_internal_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_key(), target);
  }

  // float value = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LongFloat)
  return target;
}

size_t LongFloat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LongFloat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 key = 1;
  if (this->_internal_key() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_key());
  }

  // float value = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LongFloat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LongFloat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LongFloat::GetClassData() const { return &_class_data_; }


void LongFloat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LongFloat*>(&to_msg);
  auto& from = static_cast<const LongFloat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LongFloat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_key() != 0) {
    _this->_internal_set_key(from._internal_key());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = from._internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LongFloat::CopyFrom(const LongFloat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LongFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LongFloat::IsInitialized() const {
  return true;
}

void LongFloat::InternalSwap(LongFloat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LongFloat, _impl_.value_)
      + sizeof(LongFloat::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(LongFloat, _impl_.key_)>(
          reinterpret_cast<char*>(&_impl_.key_),
          reinterpret_cast<char*>(&other->_impl_.key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LongFloat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_features_2eproto_getter, &descriptor_table_features_2eproto_once,
      file_level_metadata_features_2eproto[9]);
}

// ===================================================================

class LongInt::_Internal {
 public:
};

LongInt::LongInt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LongInt)
}
LongInt::LongInt(const LongInt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LongInt* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.key_, &from._impl_.key_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.value_) -
    reinterpret_cast<char*>(&_impl_.key_)) + sizeof(_impl_.value_));
  // @@protoc_insertion_point(copy_constructor:LongInt)
}

inline void LongInt::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){int64_t{0}}
    , decltype(_impl_.value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LongInt::~LongInt() {
  // @@protoc_insertion_point(destructor:LongInt)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LongInt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LongInt::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LongInt::Clear() {
// @@protoc_insertion_point(message_clear_start:LongInt)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.value_) -
      reinterpret_cast<char*>(&_impl_.key_)) + sizeof(_impl_.value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LongInt::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LongInt::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LongInt)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 key = 1;
  if (this->_internal_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_key(), target);
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LongInt)
  return target;
}

size_t LongInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LongInt)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 key = 1;
  if (this->_internal_key() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_key());
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LongInt::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LongInt::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LongInt::GetClassData() const { return &_class_data_; }


void LongInt::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LongInt*>(&to_msg);
  auto& from = static_cast<const LongInt&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LongInt)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_key() != 0) {
    _this->_internal_set_key(from._internal_key());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LongInt::CopyFrom(const LongInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LongInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LongInt::IsInitialized() const {
  return true;
}

void LongInt::InternalSwap(LongInt* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LongInt, _impl_.value_)
      + sizeof(LongInt::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(LongInt, _impl_.key_)>(
          reinterpret_cast<char*>(&_impl_.key_),
          reinterpret_cast<char*>(&other->_impl_.key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LongInt::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_features_2eproto_getter, &descriptor_table_features_2eproto_once,
      file_level_metadata_features_2eproto[10]);
}

// ===================================================================

class StrIntList::_Internal {
 public:
};

StrIntList::StrIntList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:StrIntList)
}
StrIntList::StrIntList(const StrIntList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StrIntList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){from._impl_.value_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:StrIntList)
}

inline void StrIntList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StrIntList::~StrIntList() {
  // @@protoc_insertion_point(destructor:StrIntList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StrIntList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.~RepeatedPtrField();
}

void StrIntList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StrIntList::Clear() {
// @@protoc_insertion_point(message_clear_start:StrIntList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StrIntList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .StrInt value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StrIntList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StrIntList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .StrInt value = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_value_size()); i < n; i++) {
    const auto& repfield = this->_internal_value(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StrIntList)
  return target;
}

size_t StrIntList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StrIntList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .StrInt value = 1;
  total_size += 1UL * this->_internal_value_size();
  for (const auto& msg : this->_impl_.value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StrIntList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StrIntList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StrIntList::GetClassData() const { return &_class_data_; }


void StrIntList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StrIntList*>(&to_msg);
  auto& from = static_cast<const StrIntList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:StrIntList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.value_.MergeFrom(from._impl_.value_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StrIntList::CopyFrom(const StrIntList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StrIntList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrIntList::IsInitialized() const {
  return true;
}

void StrIntList::InternalSwap(StrIntList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.value_.InternalSwap(&other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StrIntList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_features_2eproto_getter, &descriptor_table_features_2eproto_once,
      file_level_metadata_features_2eproto[11]);
}

// ===================================================================

class StrFloatList::_Internal {
 public:
};

StrFloatList::StrFloatList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:StrFloatList)
}
StrFloatList::StrFloatList(const StrFloatList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StrFloatList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){from._impl_.value_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:StrFloatList)
}

inline void StrFloatList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StrFloatList::~StrFloatList() {
  // @@protoc_insertion_point(destructor:StrFloatList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StrFloatList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.~RepeatedPtrField();
}

void StrFloatList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StrFloatList::Clear() {
// @@protoc_insertion_point(message_clear_start:StrFloatList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StrFloatList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .StrFloat value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StrFloatList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StrFloatList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .StrFloat value = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_value_size()); i < n; i++) {
    const auto& repfield = this->_internal_value(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StrFloatList)
  return target;
}

size_t StrFloatList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StrFloatList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .StrFloat value = 1;
  total_size += 1UL * this->_internal_value_size();
  for (const auto& msg : this->_impl_.value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StrFloatList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StrFloatList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StrFloatList::GetClassData() const { return &_class_data_; }


void StrFloatList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StrFloatList*>(&to_msg);
  auto& from = static_cast<const StrFloatList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:StrFloatList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.value_.MergeFrom(from._impl_.value_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StrFloatList::CopyFrom(const StrFloatList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StrFloatList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrFloatList::IsInitialized() const {
  return true;
}

void StrFloatList::InternalSwap(StrFloatList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.value_.InternalSwap(&other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StrFloatList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_features_2eproto_getter, &descriptor_table_features_2eproto_once,
      file_level_metadata_features_2eproto[12]);
}

// ===================================================================

class IntFloatList::_Internal {
 public:
};

IntFloatList::IntFloatList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IntFloatList)
}
IntFloatList::IntFloatList(const IntFloatList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IntFloatList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){from._impl_.value_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IntFloatList)
}

inline void IntFloatList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IntFloatList::~IntFloatList() {
  // @@protoc_insertion_point(destructor:IntFloatList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IntFloatList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.~RepeatedPtrField();
}

void IntFloatList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IntFloatList::Clear() {
// @@protoc_insertion_point(message_clear_start:IntFloatList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntFloatList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .IntFloat value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IntFloatList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IntFloatList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IntFloat value = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_value_size()); i < n; i++) {
    const auto& repfield = this->_internal_value(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IntFloatList)
  return target;
}

size_t IntFloatList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IntFloatList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IntFloat value = 1;
  total_size += 1UL * this->_internal_value_size();
  for (const auto& msg : this->_impl_.value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IntFloatList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IntFloatList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IntFloatList::GetClassData() const { return &_class_data_; }


void IntFloatList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IntFloatList*>(&to_msg);
  auto& from = static_cast<const IntFloatList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:IntFloatList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.value_.MergeFrom(from._impl_.value_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IntFloatList::CopyFrom(const IntFloatList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IntFloatList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntFloatList::IsInitialized() const {
  return true;
}

void IntFloatList::InternalSwap(IntFloatList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.value_.InternalSwap(&other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IntFloatList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_features_2eproto_getter, &descriptor_table_features_2eproto_once,
      file_level_metadata_features_2eproto[13]);
}

// ===================================================================

class IntIntList::_Internal {
 public:
};

IntIntList::IntIntList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IntIntList)
}
IntIntList::IntIntList(const IntIntList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IntIntList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){from._impl_.value_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IntIntList)
}

inline void IntIntList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IntIntList::~IntIntList() {
  // @@protoc_insertion_point(destructor:IntIntList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IntIntList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.~RepeatedPtrField();
}

void IntIntList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IntIntList::Clear() {
// @@protoc_insertion_point(message_clear_start:IntIntList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntIntList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .IntInt value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IntIntList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IntIntList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IntInt value = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_value_size()); i < n; i++) {
    const auto& repfield = this->_internal_value(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IntIntList)
  return target;
}

size_t IntIntList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IntIntList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IntInt value = 1;
  total_size += 1UL * this->_internal_value_size();
  for (const auto& msg : this->_impl_.value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IntIntList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IntIntList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IntIntList::GetClassData() const { return &_class_data_; }


void IntIntList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IntIntList*>(&to_msg);
  auto& from = static_cast<const IntIntList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:IntIntList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.value_.MergeFrom(from._impl_.value_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IntIntList::CopyFrom(const IntIntList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IntIntList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntIntList::IsInitialized() const {
  return true;
}

void IntIntList::InternalSwap(IntIntList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.value_.InternalSwap(&other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IntIntList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_features_2eproto_getter, &descriptor_table_features_2eproto_once,
      file_level_metadata_features_2eproto[14]);
}

// ===================================================================

class LongIntList::_Internal {
 public:
};

LongIntList::LongIntList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LongIntList)
}
LongIntList::LongIntList(const LongIntList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LongIntList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){from._impl_.value_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LongIntList)
}

inline void LongIntList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LongIntList::~LongIntList() {
  // @@protoc_insertion_point(destructor:LongIntList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LongIntList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.~RepeatedPtrField();
}

void LongIntList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LongIntList::Clear() {
// @@protoc_insertion_point(message_clear_start:LongIntList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LongIntList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .LongInt value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LongIntList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LongIntList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .LongInt value = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_value_size()); i < n; i++) {
    const auto& repfield = this->_internal_value(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LongIntList)
  return target;
}

size_t LongIntList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LongIntList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LongInt value = 1;
  total_size += 1UL * this->_internal_value_size();
  for (const auto& msg : this->_impl_.value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LongIntList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LongIntList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LongIntList::GetClassData() const { return &_class_data_; }


void LongIntList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LongIntList*>(&to_msg);
  auto& from = static_cast<const LongIntList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LongIntList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.value_.MergeFrom(from._impl_.value_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LongIntList::CopyFrom(const LongIntList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LongIntList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LongIntList::IsInitialized() const {
  return true;
}

void LongIntList::InternalSwap(LongIntList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.value_.InternalSwap(&other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LongIntList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_features_2eproto_getter, &descriptor_table_features_2eproto_once,
      file_level_metadata_features_2eproto[15]);
}

// ===================================================================

class LongFloatList::_Internal {
 public:
};

LongFloatList::LongFloatList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LongFloatList)
}
LongFloatList::LongFloatList(const LongFloatList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LongFloatList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){from._impl_.value_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LongFloatList)
}

inline void LongFloatList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LongFloatList::~LongFloatList() {
  // @@protoc_insertion_point(destructor:LongFloatList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LongFloatList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.~RepeatedPtrField();
}

void LongFloatList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LongFloatList::Clear() {
// @@protoc_insertion_point(message_clear_start:LongFloatList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LongFloatList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .LongFloat value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LongFloatList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LongFloatList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .LongFloat value = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_value_size()); i < n; i++) {
    const auto& repfield = this->_internal_value(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LongFloatList)
  return target;
}

size_t LongFloatList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LongFloatList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LongFloat value = 1;
  total_size += 1UL * this->_internal_value_size();
  for (const auto& msg : this->_impl_.value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LongFloatList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LongFloatList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LongFloatList::GetClassData() const { return &_class_data_; }


void LongFloatList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LongFloatList*>(&to_msg);
  auto& from = static_cast<const LongFloatList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LongFloatList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.value_.MergeFrom(from._impl_.value_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LongFloatList::CopyFrom(const LongFloatList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LongFloatList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LongFloatList::IsInitialized() const {
  return true;
}

void LongFloatList::InternalSwap(LongFloatList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.value_.InternalSwap(&other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LongFloatList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_features_2eproto_getter, &descriptor_table_features_2eproto_once,
      file_level_metadata_features_2eproto[16]);
}

// ===================================================================

class FloatList::_Internal {
 public:
};

FloatList::FloatList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:FloatList)
}
FloatList::FloatList(const FloatList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FloatList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){from._impl_.value_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:FloatList)
}

inline void FloatList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FloatList::~FloatList() {
  // @@protoc_insertion_point(destructor:FloatList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FloatList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.~RepeatedField();
}

void FloatList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FloatList::Clear() {
// @@protoc_insertion_point(message_clear_start:FloatList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FloatList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float value = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 13) {
          _internal_add_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FloatList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FloatList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float value = 1 [packed = true];
  if (this->_internal_value_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FloatList)
  return target;
}

size_t FloatList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FloatList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float value = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_value_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FloatList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FloatList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FloatList::GetClassData() const { return &_class_data_; }


void FloatList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FloatList*>(&to_msg);
  auto& from = static_cast<const FloatList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:FloatList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.value_.MergeFrom(from._impl_.value_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FloatList::CopyFrom(const FloatList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FloatList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatList::IsInitialized() const {
  return true;
}

void FloatList::InternalSwap(FloatList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.value_.InternalSwap(&other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FloatList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_features_2eproto_getter, &descriptor_table_features_2eproto_once,
      file_level_metadata_features_2eproto[17]);
}

// ===================================================================

class LongList::_Internal {
 public:
};

LongList::LongList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LongList)
}
LongList::LongList(const LongList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LongList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){from._impl_.value_}
    , /*decltype(_impl_._value_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LongList)
}

inline void LongList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){arena}
    , /*decltype(_impl_._value_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LongList::~LongList() {
  // @@protoc_insertion_point(destructor:LongList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LongList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.~RepeatedField();
}

void LongList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LongList::Clear() {
// @@protoc_insertion_point(message_clear_start:LongList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LongList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 value = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LongList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LongList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 value = 1 [packed = true];
  {
    int byte_size = _impl_._value_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_value(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LongList)
  return target;
}

size_t LongList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LongList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 value = 1 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.value_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._value_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LongList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LongList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LongList::GetClassData() const { return &_class_data_; }


void LongList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LongList*>(&to_msg);
  auto& from = static_cast<const LongList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LongList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.value_.MergeFrom(from._impl_.value_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LongList::CopyFrom(const LongList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LongList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LongList::IsInitialized() const {
  return true;
}

void LongList::InternalSwap(LongList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.value_.InternalSwap(&other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LongList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_features_2eproto_getter, &descriptor_table_features_2eproto_once,
      file_level_metadata_features_2eproto[18]);
}

// ===================================================================

class IntList::_Internal {
 public:
};

IntList::IntList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IntList)
}
IntList::IntList(const IntList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IntList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){from._impl_.value_}
    , /*decltype(_impl_._value_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IntList)
}

inline void IntList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){arena}
    , /*decltype(_impl_._value_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IntList::~IntList() {
  // @@protoc_insertion_point(destructor:IntList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IntList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.~RepeatedField();
}

void IntList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IntList::Clear() {
// @@protoc_insertion_point(message_clear_start:IntList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 value = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IntList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IntList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 value = 1 [packed = true];
  {
    int byte_size = _impl_._value_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_value(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IntList)
  return target;
}

size_t IntList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IntList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 value = 1 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.value_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._value_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IntList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IntList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IntList::GetClassData() const { return &_class_data_; }


void IntList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IntList*>(&to_msg);
  auto& from = static_cast<const IntList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:IntList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.value_.MergeFrom(from._impl_.value_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IntList::CopyFrom(const IntList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IntList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntList::IsInitialized() const {
  return true;
}

void IntList::InternalSwap(IntList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.value_.InternalSwap(&other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IntList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_features_2eproto_getter, &descriptor_table_features_2eproto_once,
      file_level_metadata_features_2eproto[19]);
}

// ===================================================================

class StrList::_Internal {
 public:
};

StrList::StrList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:StrList)
}
StrList::StrList(const StrList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StrList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){from._impl_.value_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:StrList)
}

inline void StrList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StrList::~StrList() {
  // @@protoc_insertion_point(destructor:StrList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StrList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.~RepeatedPtrField();
}

void StrList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StrList::Clear() {
// @@protoc_insertion_point(message_clear_start:StrList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StrList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_value();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "StrList.value"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StrList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StrList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string value = 1;
  for (int i = 0, n = this->_internal_value_size(); i < n; i++) {
    const auto& s = this->_internal_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StrList.value");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StrList)
  return target;
}

size_t StrList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StrList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string value = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.value_.size());
  for (int i = 0, n = _impl_.value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.value_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StrList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StrList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StrList::GetClassData() const { return &_class_data_; }


void StrList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StrList*>(&to_msg);
  auto& from = static_cast<const StrList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:StrList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.value_.MergeFrom(from._impl_.value_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StrList::CopyFrom(const StrList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StrList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrList::IsInitialized() const {
  return true;
}

void StrList::InternalSwap(StrList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.value_.InternalSwap(&other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StrList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_features_2eproto_getter, &descriptor_table_features_2eproto_once,
      file_level_metadata_features_2eproto[20]);
}

// ===================================================================

class UserActionList::_Internal {
 public:
};

UserActionList::UserActionList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:UserActionList)
}
UserActionList::UserActionList(const UserActionList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserActionList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){from._impl_.value_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:UserActionList)
}

inline void UserActionList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UserActionList::~UserActionList() {
  // @@protoc_insertion_point(destructor:UserActionList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserActionList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.~RepeatedPtrField();
}

void UserActionList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserActionList::Clear() {
// @@protoc_insertion_point(message_clear_start:UserActionList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserActionList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .UserAction value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserActionList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserActionList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .UserAction value = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_value_size()); i < n; i++) {
    const auto& repfield = this->_internal_value(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserActionList)
  return target;
}

size_t UserActionList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserActionList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .UserAction value = 1;
  total_size += 1UL * this->_internal_value_size();
  for (const auto& msg : this->_impl_.value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserActionList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserActionList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserActionList::GetClassData() const { return &_class_data_; }


void UserActionList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserActionList*>(&to_msg);
  auto& from = static_cast<const UserActionList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:UserActionList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.value_.MergeFrom(from._impl_.value_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserActionList::CopyFrom(const UserActionList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserActionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserActionList::IsInitialized() const {
  return true;
}

void UserActionList::InternalSwap(UserActionList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.value_.InternalSwap(&other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserActionList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_features_2eproto_getter, &descriptor_table_features_2eproto_once,
      file_level_metadata_features_2eproto[21]);
}

// ===================================================================

class Item::_Internal {
 public:
};

Item::Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Item)
}
Item::Item(const Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_id_){}
    , decltype(_impl_.collection_id_){}
    , decltype(_impl_.store_id_){}
    , decltype(_impl_.first_time_){}
    , decltype(_impl_.last_second_time_){}
    , decltype(_impl_.last_time_){}
    , decltype(_impl_.cnt_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.item_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.item_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_item_id().empty()) {
    _this->_impl_.item_id_.Set(from._internal_item_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.collection_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_id().empty()) {
    _this->_impl_.collection_id_.Set(from._internal_collection_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.store_id_, &from._impl_.store_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cnt_) -
    reinterpret_cast<char*>(&_impl_.store_id_)) + sizeof(_impl_.cnt_));
  // @@protoc_insertion_point(copy_constructor:Item)
}

inline void Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_id_){}
    , decltype(_impl_.collection_id_){}
    , decltype(_impl_.store_id_){int64_t{0}}
    , decltype(_impl_.first_time_){int64_t{0}}
    , decltype(_impl_.last_second_time_){int64_t{0}}
    , decltype(_impl_.last_time_){int64_t{0}}
    , decltype(_impl_.cnt_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.item_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.item_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.collection_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Item::~Item() {
  // @@protoc_insertion_point(destructor:Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.item_id_.Destroy();
  _impl_.collection_id_.Destroy();
}

void Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Item::Clear() {
// @@protoc_insertion_point(message_clear_start:Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item_id_.ClearToEmpty();
  _impl_.collection_id_.ClearToEmpty();
  ::memset(&_impl_.store_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cnt_) -
      reinterpret_cast<char*>(&_impl_.store_id_)) + sizeof(_impl_.cnt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_item_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Item.item_id"));
        } else
          goto handle_unusual;
        continue;
      // string collection_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_collection_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Item.collection_id"));
        } else
          goto handle_unusual;
        continue;
      // int64 store_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.store_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 first_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.first_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 last_second_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.last_second_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 last_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.last_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 cnt = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string item_id = 1;
  if (!this->_internal_item_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_item_id().data(), static_cast<int>(this->_internal_item_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Item.item_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_item_id(), target);
  }

  // string collection_id = 2;
  if (!this->_internal_collection_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_id().data(), static_cast<int>(this->_internal_collection_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Item.collection_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_collection_id(), target);
  }

  // int64 store_id = 3;
  if (this->_internal_store_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_store_id(), target);
  }

  // int64 first_time = 4;
  if (this->_internal_first_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_first_time(), target);
  }

  // int64 last_second_time = 5;
  if (this->_internal_last_second_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_last_second_time(), target);
  }

  // int64 last_time = 6;
  if (this->_internal_last_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_last_time(), target);
  }

  // int64 cnt = 7;
  if (this->_internal_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_cnt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Item)
  return target;
}

size_t Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string item_id = 1;
  if (!this->_internal_item_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_item_id());
  }

  // string collection_id = 2;
  if (!this->_internal_collection_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_id());
  }

  // int64 store_id = 3;
  if (this->_internal_store_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_store_id());
  }

  // int64 first_time = 4;
  if (this->_internal_first_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_first_time());
  }

  // int64 last_second_time = 5;
  if (this->_internal_last_second_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_second_time());
  }

  // int64 last_time = 6;
  if (this->_internal_last_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_time());
  }

  // int64 cnt = 7;
  if (this->_internal_cnt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_cnt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Item::GetClassData() const { return &_class_data_; }


void Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Item*>(&to_msg);
  auto& from = static_cast<const Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_item_id().empty()) {
    _this->_internal_set_item_id(from._internal_item_id());
  }
  if (!from._internal_collection_id().empty()) {
    _this->_internal_set_collection_id(from._internal_collection_id());
  }
  if (from._internal_store_id() != 0) {
    _this->_internal_set_store_id(from._internal_store_id());
  }
  if (from._internal_first_time() != 0) {
    _this->_internal_set_first_time(from._internal_first_time());
  }
  if (from._internal_last_second_time() != 0) {
    _this->_internal_set_last_second_time(from._internal_last_second_time());
  }
  if (from._internal_last_time() != 0) {
    _this->_internal_set_last_time(from._internal_last_time());
  }
  if (from._internal_cnt() != 0) {
    _this->_internal_set_cnt(from._internal_cnt());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Item::CopyFrom(const Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item::IsInitialized() const {
  return true;
}

void Item::InternalSwap(Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.item_id_, lhs_arena,
      &other->_impl_.item_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_id_, lhs_arena,
      &other->_impl_.collection_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Item, _impl_.cnt_)
      + sizeof(Item::_impl_.cnt_)
      - PROTOBUF_FIELD_OFFSET(Item, _impl_.store_id_)>(
          reinterpret_cast<char*>(&_impl_.store_id_),
          reinterpret_cast<char*>(&other->_impl_.store_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_features_2eproto_getter, &descriptor_table_features_2eproto_once,
      file_level_metadata_features_2eproto[22]);
}

// ===================================================================

RTUserActionList_ItemsEntry_DoNotUse::RTUserActionList_ItemsEntry_DoNotUse() {}
RTUserActionList_ItemsEntry_DoNotUse::RTUserActionList_ItemsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RTUserActionList_ItemsEntry_DoNotUse::MergeFrom(const RTUserActionList_ItemsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RTUserActionList_ItemsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_features_2eproto_getter, &descriptor_table_features_2eproto_once,
      file_level_metadata_features_2eproto[23]);
}

// ===================================================================

class RTUserActionList::_Internal {
 public:
};

RTUserActionList::RTUserActionList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &RTUserActionList::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:RTUserActionList)
}
RTUserActionList::RTUserActionList(const RTUserActionList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RTUserActionList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.items_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  // @@protoc_insertion_point(copy_constructor:RTUserActionList)
}

inline void RTUserActionList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.items_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RTUserActionList::~RTUserActionList() {
  // @@protoc_insertion_point(destructor:RTUserActionList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void RTUserActionList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.Destruct();
  _impl_.items_.~MapField();
}

void RTUserActionList::ArenaDtor(void* object) {
  RTUserActionList* _this = reinterpret_cast< RTUserActionList* >(object);
  _this->_impl_.items_.Destruct();
}
void RTUserActionList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RTUserActionList::Clear() {
// @@protoc_insertion_point(message_clear_start:RTUserActionList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RTUserActionList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .Item> items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.items_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RTUserActionList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RTUserActionList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .Item> items = 1;
  if (!this->_internal_items().empty()) {
    using MapType = ::_pb::Map<std::string, ::Item>;
    using WireHelper = RTUserActionList_ItemsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_items();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "RTUserActionList.ItemsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RTUserActionList)
  return target;
}

size_t RTUserActionList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RTUserActionList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .Item> items = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_items_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Item >::const_iterator
      it = this->_internal_items().begin();
      it != this->_internal_items().end(); ++it) {
    total_size += RTUserActionList_ItemsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RTUserActionList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RTUserActionList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RTUserActionList::GetClassData() const { return &_class_data_; }


void RTUserActionList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RTUserActionList*>(&to_msg);
  auto& from = static_cast<const RTUserActionList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RTUserActionList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RTUserActionList::CopyFrom(const RTUserActionList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RTUserActionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RTUserActionList::IsInitialized() const {
  return true;
}

void RTUserActionList::InternalSwap(RTUserActionList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RTUserActionList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_features_2eproto_getter, &descriptor_table_features_2eproto_once,
      file_level_metadata_features_2eproto[24]);
}

// ===================================================================

class ItemAction::_Internal {
 public:
};

ItemAction::ItemAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ItemAction)
}
ItemAction::ItemAction(const ItemAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ItemAction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.event_){}
    , decltype(_impl_.context_){}
    , decltype(_impl_.date_){}
    , decltype(_impl_.cnt_){}
    , decltype(_impl_.dist_cnt_){}
    , decltype(_impl_.click_cnt_){}
    , decltype(_impl_.buy_cnt_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.event_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_event().empty()) {
    _this->_impl_.event_.Set(from._internal_event(), 
      _this->GetArenaForAllocation());
  }
  _impl_.context_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.context_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_context().empty()) {
    _this->_impl_.context_.Set(from._internal_context(), 
      _this->GetArenaForAllocation());
  }
  _impl_.date_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.date_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_date().empty()) {
    _this->_impl_.date_.Set(from._internal_date(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.cnt_, &from._impl_.cnt_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.buy_cnt_) -
    reinterpret_cast<char*>(&_impl_.cnt_)) + sizeof(_impl_.buy_cnt_));
  // @@protoc_insertion_point(copy_constructor:ItemAction)
}

inline void ItemAction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.event_){}
    , decltype(_impl_.context_){}
    , decltype(_impl_.date_){}
    , decltype(_impl_.cnt_){0}
    , decltype(_impl_.dist_cnt_){0}
    , decltype(_impl_.click_cnt_){0}
    , decltype(_impl_.buy_cnt_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.event_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.context_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.context_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.date_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.date_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ItemAction::~ItemAction() {
  // @@protoc_insertion_point(destructor:ItemAction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ItemAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.event_.Destroy();
  _impl_.context_.Destroy();
  _impl_.date_.Destroy();
}

void ItemAction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ItemAction::Clear() {
// @@protoc_insertion_point(message_clear_start:ItemAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.event_.ClearToEmpty();
  _impl_.context_.ClearToEmpty();
  _impl_.date_.ClearToEmpty();
  ::memset(&_impl_.cnt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.buy_cnt_) -
      reinterpret_cast<char*>(&_impl_.cnt_)) + sizeof(_impl_.buy_cnt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ItemAction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_event();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ItemAction.event"));
        } else
          goto handle_unusual;
        continue;
      // string context = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_context();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ItemAction.context"));
        } else
          goto handle_unusual;
        continue;
      // int32 cnt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 dist_cnt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.dist_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 click_cnt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.click_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 buy_cnt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.buy_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string date = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_date();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ItemAction.date"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ItemAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ItemAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string event = 1;
  if (!this->_internal_event().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event().data(), static_cast<int>(this->_internal_event().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ItemAction.event");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_event(), target);
  }

  // string context = 2;
  if (!this->_internal_context().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_context().data(), static_cast<int>(this->_internal_context().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ItemAction.context");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_context(), target);
  }

  // int32 cnt = 3;
  if (this->_internal_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_cnt(), target);
  }

  // int32 dist_cnt = 4;
  if (this->_internal_dist_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_dist_cnt(), target);
  }

  // int32 click_cnt = 5;
  if (this->_internal_click_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_click_cnt(), target);
  }

  // int32 buy_cnt = 6;
  if (this->_internal_buy_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_buy_cnt(), target);
  }

  // string date = 7;
  if (!this->_internal_date().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_date().data(), static_cast<int>(this->_internal_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ItemAction.date");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_date(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ItemAction)
  return target;
}

size_t ItemAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ItemAction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string event = 1;
  if (!this->_internal_event().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event());
  }

  // string context = 2;
  if (!this->_internal_context().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_context());
  }

  // string date = 7;
  if (!this->_internal_date().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_date());
  }

  // int32 cnt = 3;
  if (this->_internal_cnt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cnt());
  }

  // int32 dist_cnt = 4;
  if (this->_internal_dist_cnt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dist_cnt());
  }

  // int32 click_cnt = 5;
  if (this->_internal_click_cnt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_click_cnt());
  }

  // int32 buy_cnt = 6;
  if (this->_internal_buy_cnt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_buy_cnt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ItemAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ItemAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ItemAction::GetClassData() const { return &_class_data_; }


void ItemAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ItemAction*>(&to_msg);
  auto& from = static_cast<const ItemAction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ItemAction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_event().empty()) {
    _this->_internal_set_event(from._internal_event());
  }
  if (!from._internal_context().empty()) {
    _this->_internal_set_context(from._internal_context());
  }
  if (!from._internal_date().empty()) {
    _this->_internal_set_date(from._internal_date());
  }
  if (from._internal_cnt() != 0) {
    _this->_internal_set_cnt(from._internal_cnt());
  }
  if (from._internal_dist_cnt() != 0) {
    _this->_internal_set_dist_cnt(from._internal_dist_cnt());
  }
  if (from._internal_click_cnt() != 0) {
    _this->_internal_set_click_cnt(from._internal_click_cnt());
  }
  if (from._internal_buy_cnt() != 0) {
    _this->_internal_set_buy_cnt(from._internal_buy_cnt());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ItemAction::CopyFrom(const ItemAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ItemAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemAction::IsInitialized() const {
  return true;
}

void ItemAction::InternalSwap(ItemAction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.event_, lhs_arena,
      &other->_impl_.event_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.context_, lhs_arena,
      &other->_impl_.context_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.date_, lhs_arena,
      &other->_impl_.date_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ItemAction, _impl_.buy_cnt_)
      + sizeof(ItemAction::_impl_.buy_cnt_)
      - PROTOBUF_FIELD_OFFSET(ItemAction, _impl_.cnt_)>(
          reinterpret_cast<char*>(&_impl_.cnt_),
          reinterpret_cast<char*>(&other->_impl_.cnt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemAction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_features_2eproto_getter, &descriptor_table_features_2eproto_once,
      file_level_metadata_features_2eproto[25]);
}

// ===================================================================

class ItemActionList::_Internal {
 public:
};

ItemActionList::ItemActionList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ItemActionList)
}
ItemActionList::ItemActionList(const ItemActionList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ItemActionList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){from._impl_.value_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ItemActionList)
}

inline void ItemActionList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ItemActionList::~ItemActionList() {
  // @@protoc_insertion_point(destructor:ItemActionList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ItemActionList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.~RepeatedPtrField();
}

void ItemActionList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ItemActionList::Clear() {
// @@protoc_insertion_point(message_clear_start:ItemActionList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ItemActionList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ItemAction value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ItemActionList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ItemActionList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ItemAction value = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_value_size()); i < n; i++) {
    const auto& repfield = this->_internal_value(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ItemActionList)
  return target;
}

size_t ItemActionList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ItemActionList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ItemAction value = 1;
  total_size += 1UL * this->_internal_value_size();
  for (const auto& msg : this->_impl_.value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ItemActionList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ItemActionList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ItemActionList::GetClassData() const { return &_class_data_; }


void ItemActionList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ItemActionList*>(&to_msg);
  auto& from = static_cast<const ItemActionList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ItemActionList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.value_.MergeFrom(from._impl_.value_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ItemActionList::CopyFrom(const ItemActionList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ItemActionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemActionList::IsInitialized() const {
  return true;
}

void ItemActionList::InternalSwap(ItemActionList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.value_.InternalSwap(&other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemActionList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_features_2eproto_getter, &descriptor_table_features_2eproto_once,
      file_level_metadata_features_2eproto[26]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::BatchFeatures*
Arena::CreateMaybeMessage< ::BatchFeatures >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BatchFeatures >(arena);
}
template<> PROTOBUF_NOINLINE ::Features_ValueEntry_DoNotUse*
Arena::CreateMaybeMessage< ::Features_ValueEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Features_ValueEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::Features*
Arena::CreateMaybeMessage< ::Features >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Features >(arena);
}
template<> PROTOBUF_NOINLINE ::Feature*
Arena::CreateMaybeMessage< ::Feature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Feature >(arena);
}
template<> PROTOBUF_NOINLINE ::UserAction*
Arena::CreateMaybeMessage< ::UserAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserAction >(arena);
}
template<> PROTOBUF_NOINLINE ::StrInt*
Arena::CreateMaybeMessage< ::StrInt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StrInt >(arena);
}
template<> PROTOBUF_NOINLINE ::StrFloat*
Arena::CreateMaybeMessage< ::StrFloat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StrFloat >(arena);
}
template<> PROTOBUF_NOINLINE ::IntInt*
Arena::CreateMaybeMessage< ::IntInt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IntInt >(arena);
}
template<> PROTOBUF_NOINLINE ::IntFloat*
Arena::CreateMaybeMessage< ::IntFloat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IntFloat >(arena);
}
template<> PROTOBUF_NOINLINE ::LongFloat*
Arena::CreateMaybeMessage< ::LongFloat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LongFloat >(arena);
}
template<> PROTOBUF_NOINLINE ::LongInt*
Arena::CreateMaybeMessage< ::LongInt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LongInt >(arena);
}
template<> PROTOBUF_NOINLINE ::StrIntList*
Arena::CreateMaybeMessage< ::StrIntList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StrIntList >(arena);
}
template<> PROTOBUF_NOINLINE ::StrFloatList*
Arena::CreateMaybeMessage< ::StrFloatList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StrFloatList >(arena);
}
template<> PROTOBUF_NOINLINE ::IntFloatList*
Arena::CreateMaybeMessage< ::IntFloatList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IntFloatList >(arena);
}
template<> PROTOBUF_NOINLINE ::IntIntList*
Arena::CreateMaybeMessage< ::IntIntList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IntIntList >(arena);
}
template<> PROTOBUF_NOINLINE ::LongIntList*
Arena::CreateMaybeMessage< ::LongIntList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LongIntList >(arena);
}
template<> PROTOBUF_NOINLINE ::LongFloatList*
Arena::CreateMaybeMessage< ::LongFloatList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LongFloatList >(arena);
}
template<> PROTOBUF_NOINLINE ::FloatList*
Arena::CreateMaybeMessage< ::FloatList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FloatList >(arena);
}
template<> PROTOBUF_NOINLINE ::LongList*
Arena::CreateMaybeMessage< ::LongList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LongList >(arena);
}
template<> PROTOBUF_NOINLINE ::IntList*
Arena::CreateMaybeMessage< ::IntList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IntList >(arena);
}
template<> PROTOBUF_NOINLINE ::StrList*
Arena::CreateMaybeMessage< ::StrList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StrList >(arena);
}
template<> PROTOBUF_NOINLINE ::UserActionList*
Arena::CreateMaybeMessage< ::UserActionList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserActionList >(arena);
}
template<> PROTOBUF_NOINLINE ::Item*
Arena::CreateMaybeMessage< ::Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Item >(arena);
}
template<> PROTOBUF_NOINLINE ::RTUserActionList_ItemsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::RTUserActionList_ItemsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RTUserActionList_ItemsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::RTUserActionList*
Arena::CreateMaybeMessage< ::RTUserActionList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RTUserActionList >(arena);
}
template<> PROTOBUF_NOINLINE ::ItemAction*
Arena::CreateMaybeMessage< ::ItemAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ItemAction >(arena);
}
template<> PROTOBUF_NOINLINE ::ItemActionList*
Arena::CreateMaybeMessage< ::ItemActionList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ItemActionList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
