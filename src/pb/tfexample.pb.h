// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tfexample.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tfexample_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tfexample_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tfexample_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tfexample_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tfexample_2eproto;
class BatchSamples;
struct BatchSamplesDefaultTypeInternal;
extern BatchSamplesDefaultTypeInternal _BatchSamples_default_instance_;
class Example;
struct ExampleDefaultTypeInternal;
extern ExampleDefaultTypeInternal _Example_default_instance_;
class TFBytesList;
struct TFBytesListDefaultTypeInternal;
extern TFBytesListDefaultTypeInternal _TFBytesList_default_instance_;
class TFFeature;
struct TFFeatureDefaultTypeInternal;
extern TFFeatureDefaultTypeInternal _TFFeature_default_instance_;
class TFFeatures;
struct TFFeaturesDefaultTypeInternal;
extern TFFeaturesDefaultTypeInternal _TFFeatures_default_instance_;
class TFFeatures_FeatureEntry_DoNotUse;
struct TFFeatures_FeatureEntry_DoNotUseDefaultTypeInternal;
extern TFFeatures_FeatureEntry_DoNotUseDefaultTypeInternal _TFFeatures_FeatureEntry_DoNotUse_default_instance_;
class TFFloatList;
struct TFFloatListDefaultTypeInternal;
extern TFFloatListDefaultTypeInternal _TFFloatList_default_instance_;
class TFInt64List;
struct TFInt64ListDefaultTypeInternal;
extern TFInt64ListDefaultTypeInternal _TFInt64List_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::BatchSamples* Arena::CreateMaybeMessage<::BatchSamples>(Arena*);
template<> ::Example* Arena::CreateMaybeMessage<::Example>(Arena*);
template<> ::TFBytesList* Arena::CreateMaybeMessage<::TFBytesList>(Arena*);
template<> ::TFFeature* Arena::CreateMaybeMessage<::TFFeature>(Arena*);
template<> ::TFFeatures* Arena::CreateMaybeMessage<::TFFeatures>(Arena*);
template<> ::TFFeatures_FeatureEntry_DoNotUse* Arena::CreateMaybeMessage<::TFFeatures_FeatureEntry_DoNotUse>(Arena*);
template<> ::TFFloatList* Arena::CreateMaybeMessage<::TFFloatList>(Arena*);
template<> ::TFInt64List* Arena::CreateMaybeMessage<::TFInt64List>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class BatchSamples final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BatchSamples) */ {
 public:
  inline BatchSamples() : BatchSamples(nullptr) {}
  ~BatchSamples() override;
  explicit PROTOBUF_CONSTEXPR BatchSamples(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchSamples(const BatchSamples& from);
  BatchSamples(BatchSamples&& from) noexcept
    : BatchSamples() {
    *this = ::std::move(from);
  }

  inline BatchSamples& operator=(const BatchSamples& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchSamples& operator=(BatchSamples&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchSamples& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchSamples* internal_default_instance() {
    return reinterpret_cast<const BatchSamples*>(
               &_BatchSamples_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BatchSamples& a, BatchSamples& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchSamples* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchSamples* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchSamples* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchSamples>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchSamples& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatchSamples& from) {
    BatchSamples::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchSamples* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BatchSamples";
  }
  protected:
  explicit BatchSamples(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated .Example value = 1;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  ::Example* mutable_value(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Example >*
      mutable_value();
  private:
  const ::Example& _internal_value(int index) const;
  ::Example* _internal_add_value();
  public:
  const ::Example& value(int index) const;
  ::Example* add_value();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Example >&
      value() const;

  // @@protoc_insertion_point(class_scope:BatchSamples)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Example > value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tfexample_2eproto;
};
// -------------------------------------------------------------------

class Example final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Example) */ {
 public:
  inline Example() : Example(nullptr) {}
  ~Example() override;
  explicit PROTOBUF_CONSTEXPR Example(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Example(const Example& from);
  Example(Example&& from) noexcept
    : Example() {
    *this = ::std::move(from);
  }

  inline Example& operator=(const Example& from) {
    CopyFrom(from);
    return *this;
  }
  inline Example& operator=(Example&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Example& default_instance() {
    return *internal_default_instance();
  }
  static inline const Example* internal_default_instance() {
    return reinterpret_cast<const Example*>(
               &_Example_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Example& a, Example& b) {
    a.Swap(&b);
  }
  inline void Swap(Example* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Example* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Example* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Example>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Example& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Example& from) {
    Example::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Example* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Example";
  }
  protected:
  explicit Example(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeaturesFieldNumber = 1,
  };
  // .TFFeatures features = 1;
  bool has_features() const;
  private:
  bool _internal_has_features() const;
  public:
  void clear_features();
  const ::TFFeatures& features() const;
  PROTOBUF_NODISCARD ::TFFeatures* release_features();
  ::TFFeatures* mutable_features();
  void set_allocated_features(::TFFeatures* features);
  private:
  const ::TFFeatures& _internal_features() const;
  ::TFFeatures* _internal_mutable_features();
  public:
  void unsafe_arena_set_allocated_features(
      ::TFFeatures* features);
  ::TFFeatures* unsafe_arena_release_features();

  // @@protoc_insertion_point(class_scope:Example)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::TFFeatures* features_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tfexample_2eproto;
};
// -------------------------------------------------------------------

class TFFeatures_FeatureEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TFFeatures_FeatureEntry_DoNotUse, 
    std::string, ::TFFeature,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TFFeatures_FeatureEntry_DoNotUse, 
    std::string, ::TFFeature,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  TFFeatures_FeatureEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TFFeatures_FeatureEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TFFeatures_FeatureEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TFFeatures_FeatureEntry_DoNotUse& other);
  static const TFFeatures_FeatureEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TFFeatures_FeatureEntry_DoNotUse*>(&_TFFeatures_FeatureEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "TFFeatures.FeatureEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_tfexample_2eproto;
};

// -------------------------------------------------------------------

class TFFeatures final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TFFeatures) */ {
 public:
  inline TFFeatures() : TFFeatures(nullptr) {}
  ~TFFeatures() override;
  explicit PROTOBUF_CONSTEXPR TFFeatures(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TFFeatures(const TFFeatures& from);
  TFFeatures(TFFeatures&& from) noexcept
    : TFFeatures() {
    *this = ::std::move(from);
  }

  inline TFFeatures& operator=(const TFFeatures& from) {
    CopyFrom(from);
    return *this;
  }
  inline TFFeatures& operator=(TFFeatures&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TFFeatures& default_instance() {
    return *internal_default_instance();
  }
  static inline const TFFeatures* internal_default_instance() {
    return reinterpret_cast<const TFFeatures*>(
               &_TFFeatures_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TFFeatures& a, TFFeatures& b) {
    a.Swap(&b);
  }
  inline void Swap(TFFeatures* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TFFeatures* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TFFeatures* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TFFeatures>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TFFeatures& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TFFeatures& from) {
    TFFeatures::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TFFeatures* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TFFeatures";
  }
  protected:
  explicit TFFeatures(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kFeatureFieldNumber = 1,
  };
  // map<string, .TFFeature> feature = 1;
  int feature_size() const;
  private:
  int _internal_feature_size() const;
  public:
  void clear_feature();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TFFeature >&
      _internal_feature() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TFFeature >*
      _internal_mutable_feature();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TFFeature >&
      feature() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TFFeature >*
      mutable_feature();

  // @@protoc_insertion_point(class_scope:TFFeatures)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TFFeatures_FeatureEntry_DoNotUse,
        std::string, ::TFFeature,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> feature_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tfexample_2eproto;
};
// -------------------------------------------------------------------

class TFFeature final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TFFeature) */ {
 public:
  inline TFFeature() : TFFeature(nullptr) {}
  ~TFFeature() override;
  explicit PROTOBUF_CONSTEXPR TFFeature(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TFFeature(const TFFeature& from);
  TFFeature(TFFeature&& from) noexcept
    : TFFeature() {
    *this = ::std::move(from);
  }

  inline TFFeature& operator=(const TFFeature& from) {
    CopyFrom(from);
    return *this;
  }
  inline TFFeature& operator=(TFFeature&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TFFeature& default_instance() {
    return *internal_default_instance();
  }
  enum KindCase {
    kBytesList = 1,
    kFloatList = 2,
    kInt64List = 3,
    KIND_NOT_SET = 0,
  };

  static inline const TFFeature* internal_default_instance() {
    return reinterpret_cast<const TFFeature*>(
               &_TFFeature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TFFeature& a, TFFeature& b) {
    a.Swap(&b);
  }
  inline void Swap(TFFeature* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TFFeature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TFFeature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TFFeature>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TFFeature& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TFFeature& from) {
    TFFeature::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TFFeature* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TFFeature";
  }
  protected:
  explicit TFFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBytesListFieldNumber = 1,
    kFloatListFieldNumber = 2,
    kInt64ListFieldNumber = 3,
  };
  // .TFBytesList bytes_list = 1;
  bool has_bytes_list() const;
  private:
  bool _internal_has_bytes_list() const;
  public:
  void clear_bytes_list();
  const ::TFBytesList& bytes_list() const;
  PROTOBUF_NODISCARD ::TFBytesList* release_bytes_list();
  ::TFBytesList* mutable_bytes_list();
  void set_allocated_bytes_list(::TFBytesList* bytes_list);
  private:
  const ::TFBytesList& _internal_bytes_list() const;
  ::TFBytesList* _internal_mutable_bytes_list();
  public:
  void unsafe_arena_set_allocated_bytes_list(
      ::TFBytesList* bytes_list);
  ::TFBytesList* unsafe_arena_release_bytes_list();

  // .TFFloatList float_list = 2;
  bool has_float_list() const;
  private:
  bool _internal_has_float_list() const;
  public:
  void clear_float_list();
  const ::TFFloatList& float_list() const;
  PROTOBUF_NODISCARD ::TFFloatList* release_float_list();
  ::TFFloatList* mutable_float_list();
  void set_allocated_float_list(::TFFloatList* float_list);
  private:
  const ::TFFloatList& _internal_float_list() const;
  ::TFFloatList* _internal_mutable_float_list();
  public:
  void unsafe_arena_set_allocated_float_list(
      ::TFFloatList* float_list);
  ::TFFloatList* unsafe_arena_release_float_list();

  // .TFInt64List int64_list = 3;
  bool has_int64_list() const;
  private:
  bool _internal_has_int64_list() const;
  public:
  void clear_int64_list();
  const ::TFInt64List& int64_list() const;
  PROTOBUF_NODISCARD ::TFInt64List* release_int64_list();
  ::TFInt64List* mutable_int64_list();
  void set_allocated_int64_list(::TFInt64List* int64_list);
  private:
  const ::TFInt64List& _internal_int64_list() const;
  ::TFInt64List* _internal_mutable_int64_list();
  public:
  void unsafe_arena_set_allocated_int64_list(
      ::TFInt64List* int64_list);
  ::TFInt64List* unsafe_arena_release_int64_list();

  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:TFFeature)
 private:
  class _Internal;
  void set_has_bytes_list();
  void set_has_float_list();
  void set_has_int64_list();

  inline bool has_kind() const;
  inline void clear_has_kind();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union KindUnion {
      constexpr KindUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::TFBytesList* bytes_list_;
      ::TFFloatList* float_list_;
      ::TFInt64List* int64_list_;
    } kind_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tfexample_2eproto;
};
// -------------------------------------------------------------------

class TFBytesList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TFBytesList) */ {
 public:
  inline TFBytesList() : TFBytesList(nullptr) {}
  ~TFBytesList() override;
  explicit PROTOBUF_CONSTEXPR TFBytesList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TFBytesList(const TFBytesList& from);
  TFBytesList(TFBytesList&& from) noexcept
    : TFBytesList() {
    *this = ::std::move(from);
  }

  inline TFBytesList& operator=(const TFBytesList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TFBytesList& operator=(TFBytesList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TFBytesList& default_instance() {
    return *internal_default_instance();
  }
  static inline const TFBytesList* internal_default_instance() {
    return reinterpret_cast<const TFBytesList*>(
               &_TFBytesList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TFBytesList& a, TFBytesList& b) {
    a.Swap(&b);
  }
  inline void Swap(TFBytesList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TFBytesList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TFBytesList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TFBytesList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TFBytesList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TFBytesList& from) {
    TFBytesList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TFBytesList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TFBytesList";
  }
  protected:
  explicit TFBytesList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated bytes value = 1;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  const std::string& value(int index) const;
  std::string* mutable_value(int index);
  void set_value(int index, const std::string& value);
  void set_value(int index, std::string&& value);
  void set_value(int index, const char* value);
  void set_value(int index, const void* value, size_t size);
  std::string* add_value();
  void add_value(const std::string& value);
  void add_value(std::string&& value);
  void add_value(const char* value);
  void add_value(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_value();
  private:
  const std::string& _internal_value(int index) const;
  std::string* _internal_add_value();
  public:

  // @@protoc_insertion_point(class_scope:TFBytesList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tfexample_2eproto;
};
// -------------------------------------------------------------------

class TFFloatList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TFFloatList) */ {
 public:
  inline TFFloatList() : TFFloatList(nullptr) {}
  ~TFFloatList() override;
  explicit PROTOBUF_CONSTEXPR TFFloatList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TFFloatList(const TFFloatList& from);
  TFFloatList(TFFloatList&& from) noexcept
    : TFFloatList() {
    *this = ::std::move(from);
  }

  inline TFFloatList& operator=(const TFFloatList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TFFloatList& operator=(TFFloatList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TFFloatList& default_instance() {
    return *internal_default_instance();
  }
  static inline const TFFloatList* internal_default_instance() {
    return reinterpret_cast<const TFFloatList*>(
               &_TFFloatList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TFFloatList& a, TFFloatList& b) {
    a.Swap(&b);
  }
  inline void Swap(TFFloatList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TFFloatList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TFFloatList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TFFloatList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TFFloatList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TFFloatList& from) {
    TFFloatList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TFFloatList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TFFloatList";
  }
  protected:
  explicit TFFloatList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated float value = 1 [packed = true];
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  float _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_value() const;
  void _internal_add_value(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_value();
  public:
  float value(int index) const;
  void set_value(int index, float value);
  void add_value(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:TFFloatList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tfexample_2eproto;
};
// -------------------------------------------------------------------

class TFInt64List final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TFInt64List) */ {
 public:
  inline TFInt64List() : TFInt64List(nullptr) {}
  ~TFInt64List() override;
  explicit PROTOBUF_CONSTEXPR TFInt64List(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TFInt64List(const TFInt64List& from);
  TFInt64List(TFInt64List&& from) noexcept
    : TFInt64List() {
    *this = ::std::move(from);
  }

  inline TFInt64List& operator=(const TFInt64List& from) {
    CopyFrom(from);
    return *this;
  }
  inline TFInt64List& operator=(TFInt64List&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TFInt64List& default_instance() {
    return *internal_default_instance();
  }
  static inline const TFInt64List* internal_default_instance() {
    return reinterpret_cast<const TFInt64List*>(
               &_TFInt64List_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TFInt64List& a, TFInt64List& b) {
    a.Swap(&b);
  }
  inline void Swap(TFInt64List* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TFInt64List* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TFInt64List* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TFInt64List>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TFInt64List& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TFInt64List& from) {
    TFInt64List::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TFInt64List* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TFInt64List";
  }
  protected:
  explicit TFInt64List(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated int64 value = 1 [packed = true];
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  int64_t _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_value() const;
  void _internal_add_value(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_value();
  public:
  int64_t value(int index) const;
  void set_value(int index, int64_t value);
  void add_value(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:TFInt64List)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > value_;
    mutable std::atomic<int> _value_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tfexample_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BatchSamples

// repeated .Example value = 1;
inline int BatchSamples::_internal_value_size() const {
  return _impl_.value_.size();
}
inline int BatchSamples::value_size() const {
  return _internal_value_size();
}
inline void BatchSamples::clear_value() {
  _impl_.value_.Clear();
}
inline ::Example* BatchSamples::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:BatchSamples.value)
  return _impl_.value_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Example >*
BatchSamples::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:BatchSamples.value)
  return &_impl_.value_;
}
inline const ::Example& BatchSamples::_internal_value(int index) const {
  return _impl_.value_.Get(index);
}
inline const ::Example& BatchSamples::value(int index) const {
  // @@protoc_insertion_point(field_get:BatchSamples.value)
  return _internal_value(index);
}
inline ::Example* BatchSamples::_internal_add_value() {
  return _impl_.value_.Add();
}
inline ::Example* BatchSamples::add_value() {
  ::Example* _add = _internal_add_value();
  // @@protoc_insertion_point(field_add:BatchSamples.value)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Example >&
BatchSamples::value() const {
  // @@protoc_insertion_point(field_list:BatchSamples.value)
  return _impl_.value_;
}

// -------------------------------------------------------------------

// Example

// .TFFeatures features = 1;
inline bool Example::_internal_has_features() const {
  return this != internal_default_instance() && _impl_.features_ != nullptr;
}
inline bool Example::has_features() const {
  return _internal_has_features();
}
inline void Example::clear_features() {
  if (GetArenaForAllocation() == nullptr && _impl_.features_ != nullptr) {
    delete _impl_.features_;
  }
  _impl_.features_ = nullptr;
}
inline const ::TFFeatures& Example::_internal_features() const {
  const ::TFFeatures* p = _impl_.features_;
  return p != nullptr ? *p : reinterpret_cast<const ::TFFeatures&>(
      ::_TFFeatures_default_instance_);
}
inline const ::TFFeatures& Example::features() const {
  // @@protoc_insertion_point(field_get:Example.features)
  return _internal_features();
}
inline void Example::unsafe_arena_set_allocated_features(
    ::TFFeatures* features) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.features_);
  }
  _impl_.features_ = features;
  if (features) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Example.features)
}
inline ::TFFeatures* Example::release_features() {
  
  ::TFFeatures* temp = _impl_.features_;
  _impl_.features_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TFFeatures* Example::unsafe_arena_release_features() {
  // @@protoc_insertion_point(field_release:Example.features)
  
  ::TFFeatures* temp = _impl_.features_;
  _impl_.features_ = nullptr;
  return temp;
}
inline ::TFFeatures* Example::_internal_mutable_features() {
  
  if (_impl_.features_ == nullptr) {
    auto* p = CreateMaybeMessage<::TFFeatures>(GetArenaForAllocation());
    _impl_.features_ = p;
  }
  return _impl_.features_;
}
inline ::TFFeatures* Example::mutable_features() {
  ::TFFeatures* _msg = _internal_mutable_features();
  // @@protoc_insertion_point(field_mutable:Example.features)
  return _msg;
}
inline void Example::set_allocated_features(::TFFeatures* features) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.features_;
  }
  if (features) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(features);
    if (message_arena != submessage_arena) {
      features = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, features, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.features_ = features;
  // @@protoc_insertion_point(field_set_allocated:Example.features)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TFFeatures

// map<string, .TFFeature> feature = 1;
inline int TFFeatures::_internal_feature_size() const {
  return _impl_.feature_.size();
}
inline int TFFeatures::feature_size() const {
  return _internal_feature_size();
}
inline void TFFeatures::clear_feature() {
  _impl_.feature_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TFFeature >&
TFFeatures::_internal_feature() const {
  return _impl_.feature_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TFFeature >&
TFFeatures::feature() const {
  // @@protoc_insertion_point(field_map:TFFeatures.feature)
  return _internal_feature();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TFFeature >*
TFFeatures::_internal_mutable_feature() {
  return _impl_.feature_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TFFeature >*
TFFeatures::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_map:TFFeatures.feature)
  return _internal_mutable_feature();
}

// -------------------------------------------------------------------

// TFFeature

// .TFBytesList bytes_list = 1;
inline bool TFFeature::_internal_has_bytes_list() const {
  return kind_case() == kBytesList;
}
inline bool TFFeature::has_bytes_list() const {
  return _internal_has_bytes_list();
}
inline void TFFeature::set_has_bytes_list() {
  _impl_._oneof_case_[0] = kBytesList;
}
inline void TFFeature::clear_bytes_list() {
  if (_internal_has_bytes_list()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.bytes_list_;
    }
    clear_has_kind();
  }
}
inline ::TFBytesList* TFFeature::release_bytes_list() {
  // @@protoc_insertion_point(field_release:TFFeature.bytes_list)
  if (_internal_has_bytes_list()) {
    clear_has_kind();
    ::TFBytesList* temp = _impl_.kind_.bytes_list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.bytes_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TFBytesList& TFFeature::_internal_bytes_list() const {
  return _internal_has_bytes_list()
      ? *_impl_.kind_.bytes_list_
      : reinterpret_cast< ::TFBytesList&>(::_TFBytesList_default_instance_);
}
inline const ::TFBytesList& TFFeature::bytes_list() const {
  // @@protoc_insertion_point(field_get:TFFeature.bytes_list)
  return _internal_bytes_list();
}
inline ::TFBytesList* TFFeature::unsafe_arena_release_bytes_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TFFeature.bytes_list)
  if (_internal_has_bytes_list()) {
    clear_has_kind();
    ::TFBytesList* temp = _impl_.kind_.bytes_list_;
    _impl_.kind_.bytes_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TFFeature::unsafe_arena_set_allocated_bytes_list(::TFBytesList* bytes_list) {
  clear_kind();
  if (bytes_list) {
    set_has_bytes_list();
    _impl_.kind_.bytes_list_ = bytes_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TFFeature.bytes_list)
}
inline ::TFBytesList* TFFeature::_internal_mutable_bytes_list() {
  if (!_internal_has_bytes_list()) {
    clear_kind();
    set_has_bytes_list();
    _impl_.kind_.bytes_list_ = CreateMaybeMessage< ::TFBytesList >(GetArenaForAllocation());
  }
  return _impl_.kind_.bytes_list_;
}
inline ::TFBytesList* TFFeature::mutable_bytes_list() {
  ::TFBytesList* _msg = _internal_mutable_bytes_list();
  // @@protoc_insertion_point(field_mutable:TFFeature.bytes_list)
  return _msg;
}

// .TFFloatList float_list = 2;
inline bool TFFeature::_internal_has_float_list() const {
  return kind_case() == kFloatList;
}
inline bool TFFeature::has_float_list() const {
  return _internal_has_float_list();
}
inline void TFFeature::set_has_float_list() {
  _impl_._oneof_case_[0] = kFloatList;
}
inline void TFFeature::clear_float_list() {
  if (_internal_has_float_list()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.float_list_;
    }
    clear_has_kind();
  }
}
inline ::TFFloatList* TFFeature::release_float_list() {
  // @@protoc_insertion_point(field_release:TFFeature.float_list)
  if (_internal_has_float_list()) {
    clear_has_kind();
    ::TFFloatList* temp = _impl_.kind_.float_list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.float_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TFFloatList& TFFeature::_internal_float_list() const {
  return _internal_has_float_list()
      ? *_impl_.kind_.float_list_
      : reinterpret_cast< ::TFFloatList&>(::_TFFloatList_default_instance_);
}
inline const ::TFFloatList& TFFeature::float_list() const {
  // @@protoc_insertion_point(field_get:TFFeature.float_list)
  return _internal_float_list();
}
inline ::TFFloatList* TFFeature::unsafe_arena_release_float_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TFFeature.float_list)
  if (_internal_has_float_list()) {
    clear_has_kind();
    ::TFFloatList* temp = _impl_.kind_.float_list_;
    _impl_.kind_.float_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TFFeature::unsafe_arena_set_allocated_float_list(::TFFloatList* float_list) {
  clear_kind();
  if (float_list) {
    set_has_float_list();
    _impl_.kind_.float_list_ = float_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TFFeature.float_list)
}
inline ::TFFloatList* TFFeature::_internal_mutable_float_list() {
  if (!_internal_has_float_list()) {
    clear_kind();
    set_has_float_list();
    _impl_.kind_.float_list_ = CreateMaybeMessage< ::TFFloatList >(GetArenaForAllocation());
  }
  return _impl_.kind_.float_list_;
}
inline ::TFFloatList* TFFeature::mutable_float_list() {
  ::TFFloatList* _msg = _internal_mutable_float_list();
  // @@protoc_insertion_point(field_mutable:TFFeature.float_list)
  return _msg;
}

// .TFInt64List int64_list = 3;
inline bool TFFeature::_internal_has_int64_list() const {
  return kind_case() == kInt64List;
}
inline bool TFFeature::has_int64_list() const {
  return _internal_has_int64_list();
}
inline void TFFeature::set_has_int64_list() {
  _impl_._oneof_case_[0] = kInt64List;
}
inline void TFFeature::clear_int64_list() {
  if (_internal_has_int64_list()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.int64_list_;
    }
    clear_has_kind();
  }
}
inline ::TFInt64List* TFFeature::release_int64_list() {
  // @@protoc_insertion_point(field_release:TFFeature.int64_list)
  if (_internal_has_int64_list()) {
    clear_has_kind();
    ::TFInt64List* temp = _impl_.kind_.int64_list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.int64_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TFInt64List& TFFeature::_internal_int64_list() const {
  return _internal_has_int64_list()
      ? *_impl_.kind_.int64_list_
      : reinterpret_cast< ::TFInt64List&>(::_TFInt64List_default_instance_);
}
inline const ::TFInt64List& TFFeature::int64_list() const {
  // @@protoc_insertion_point(field_get:TFFeature.int64_list)
  return _internal_int64_list();
}
inline ::TFInt64List* TFFeature::unsafe_arena_release_int64_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TFFeature.int64_list)
  if (_internal_has_int64_list()) {
    clear_has_kind();
    ::TFInt64List* temp = _impl_.kind_.int64_list_;
    _impl_.kind_.int64_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TFFeature::unsafe_arena_set_allocated_int64_list(::TFInt64List* int64_list) {
  clear_kind();
  if (int64_list) {
    set_has_int64_list();
    _impl_.kind_.int64_list_ = int64_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TFFeature.int64_list)
}
inline ::TFInt64List* TFFeature::_internal_mutable_int64_list() {
  if (!_internal_has_int64_list()) {
    clear_kind();
    set_has_int64_list();
    _impl_.kind_.int64_list_ = CreateMaybeMessage< ::TFInt64List >(GetArenaForAllocation());
  }
  return _impl_.kind_.int64_list_;
}
inline ::TFInt64List* TFFeature::mutable_int64_list() {
  ::TFInt64List* _msg = _internal_mutable_int64_list();
  // @@protoc_insertion_point(field_mutable:TFFeature.int64_list)
  return _msg;
}

inline bool TFFeature::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void TFFeature::clear_has_kind() {
  _impl_._oneof_case_[0] = KIND_NOT_SET;
}
inline TFFeature::KindCase TFFeature::kind_case() const {
  return TFFeature::KindCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// TFBytesList

// repeated bytes value = 1;
inline int TFBytesList::_internal_value_size() const {
  return _impl_.value_.size();
}
inline int TFBytesList::value_size() const {
  return _internal_value_size();
}
inline void TFBytesList::clear_value() {
  _impl_.value_.Clear();
}
inline std::string* TFBytesList::add_value() {
  std::string* _s = _internal_add_value();
  // @@protoc_insertion_point(field_add_mutable:TFBytesList.value)
  return _s;
}
inline const std::string& TFBytesList::_internal_value(int index) const {
  return _impl_.value_.Get(index);
}
inline const std::string& TFBytesList::value(int index) const {
  // @@protoc_insertion_point(field_get:TFBytesList.value)
  return _internal_value(index);
}
inline std::string* TFBytesList::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:TFBytesList.value)
  return _impl_.value_.Mutable(index);
}
inline void TFBytesList::set_value(int index, const std::string& value) {
  _impl_.value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TFBytesList.value)
}
inline void TFBytesList::set_value(int index, std::string&& value) {
  _impl_.value_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TFBytesList.value)
}
inline void TFBytesList::set_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TFBytesList.value)
}
inline void TFBytesList::set_value(int index, const void* value, size_t size) {
  _impl_.value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TFBytesList.value)
}
inline std::string* TFBytesList::_internal_add_value() {
  return _impl_.value_.Add();
}
inline void TFBytesList::add_value(const std::string& value) {
  _impl_.value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TFBytesList.value)
}
inline void TFBytesList::add_value(std::string&& value) {
  _impl_.value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TFBytesList.value)
}
inline void TFBytesList::add_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TFBytesList.value)
}
inline void TFBytesList::add_value(const void* value, size_t size) {
  _impl_.value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TFBytesList.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TFBytesList::value() const {
  // @@protoc_insertion_point(field_list:TFBytesList.value)
  return _impl_.value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TFBytesList::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:TFBytesList.value)
  return &_impl_.value_;
}

// -------------------------------------------------------------------

// TFFloatList

// repeated float value = 1 [packed = true];
inline int TFFloatList::_internal_value_size() const {
  return _impl_.value_.size();
}
inline int TFFloatList::value_size() const {
  return _internal_value_size();
}
inline void TFFloatList::clear_value() {
  _impl_.value_.Clear();
}
inline float TFFloatList::_internal_value(int index) const {
  return _impl_.value_.Get(index);
}
inline float TFFloatList::value(int index) const {
  // @@protoc_insertion_point(field_get:TFFloatList.value)
  return _internal_value(index);
}
inline void TFFloatList::set_value(int index, float value) {
  _impl_.value_.Set(index, value);
  // @@protoc_insertion_point(field_set:TFFloatList.value)
}
inline void TFFloatList::_internal_add_value(float value) {
  _impl_.value_.Add(value);
}
inline void TFFloatList::add_value(float value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:TFFloatList.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TFFloatList::_internal_value() const {
  return _impl_.value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TFFloatList::value() const {
  // @@protoc_insertion_point(field_list:TFFloatList.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TFFloatList::_internal_mutable_value() {
  return &_impl_.value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TFFloatList::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:TFFloatList.value)
  return _internal_mutable_value();
}

// -------------------------------------------------------------------

// TFInt64List

// repeated int64 value = 1 [packed = true];
inline int TFInt64List::_internal_value_size() const {
  return _impl_.value_.size();
}
inline int TFInt64List::value_size() const {
  return _internal_value_size();
}
inline void TFInt64List::clear_value() {
  _impl_.value_.Clear();
}
inline int64_t TFInt64List::_internal_value(int index) const {
  return _impl_.value_.Get(index);
}
inline int64_t TFInt64List::value(int index) const {
  // @@protoc_insertion_point(field_get:TFInt64List.value)
  return _internal_value(index);
}
inline void TFInt64List::set_value(int index, int64_t value) {
  _impl_.value_.Set(index, value);
  // @@protoc_insertion_point(field_set:TFInt64List.value)
}
inline void TFInt64List::_internal_add_value(int64_t value) {
  _impl_.value_.Add(value);
}
inline void TFInt64List::add_value(int64_t value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:TFInt64List.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TFInt64List::_internal_value() const {
  return _impl_.value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TFInt64List::value() const {
  // @@protoc_insertion_point(field_list:TFInt64List.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TFInt64List::_internal_mutable_value() {
  return &_impl_.value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TFInt64List::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:TFInt64List.value)
  return _internal_mutable_value();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tfexample_2eproto
