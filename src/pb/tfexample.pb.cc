// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tfexample.proto

#include "tfexample.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR BatchSamples::BatchSamples(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BatchSamplesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BatchSamplesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BatchSamplesDefaultTypeInternal() {}
  union {
    BatchSamples _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BatchSamplesDefaultTypeInternal _BatchSamples_default_instance_;
PROTOBUF_CONSTEXPR Example::Example(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.features_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExampleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExampleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExampleDefaultTypeInternal() {}
  union {
    Example _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExampleDefaultTypeInternal _Example_default_instance_;
PROTOBUF_CONSTEXPR TFFeatures_FeatureEntry_DoNotUse::TFFeatures_FeatureEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TFFeatures_FeatureEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TFFeatures_FeatureEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TFFeatures_FeatureEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TFFeatures_FeatureEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TFFeatures_FeatureEntry_DoNotUseDefaultTypeInternal _TFFeatures_FeatureEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TFFeatures::TFFeatures(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.feature_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TFFeaturesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TFFeaturesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TFFeaturesDefaultTypeInternal() {}
  union {
    TFFeatures _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TFFeaturesDefaultTypeInternal _TFFeatures_default_instance_;
PROTOBUF_CONSTEXPR TFFeature::TFFeature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.kind_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct TFFeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TFFeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TFFeatureDefaultTypeInternal() {}
  union {
    TFFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TFFeatureDefaultTypeInternal _TFFeature_default_instance_;
PROTOBUF_CONSTEXPR TFBytesList::TFBytesList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TFBytesListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TFBytesListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TFBytesListDefaultTypeInternal() {}
  union {
    TFBytesList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TFBytesListDefaultTypeInternal _TFBytesList_default_instance_;
PROTOBUF_CONSTEXPR TFFloatList::TFFloatList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TFFloatListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TFFloatListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TFFloatListDefaultTypeInternal() {}
  union {
    TFFloatList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TFFloatListDefaultTypeInternal _TFFloatList_default_instance_;
PROTOBUF_CONSTEXPR TFInt64List::TFInt64List(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._value_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TFInt64ListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TFInt64ListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TFInt64ListDefaultTypeInternal() {}
  union {
    TFInt64List _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TFInt64ListDefaultTypeInternal _TFInt64List_default_instance_;
static ::_pb::Metadata file_level_metadata_tfexample_2eproto[8];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_tfexample_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tfexample_2eproto = nullptr;

const uint32_t TableStruct_tfexample_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BatchSamples, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::BatchSamples, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Example, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Example, _impl_.features_),
  PROTOBUF_FIELD_OFFSET(::TFFeatures_FeatureEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TFFeatures_FeatureEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TFFeatures_FeatureEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::TFFeatures_FeatureEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TFFeatures, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TFFeatures, _impl_.feature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TFFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TFFeature, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::TFFeature, _impl_.kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TFBytesList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TFBytesList, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TFFloatList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TFFloatList, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TFInt64List, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TFInt64List, _impl_.value_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::BatchSamples)},
  { 7, -1, -1, sizeof(::Example)},
  { 14, 22, -1, sizeof(::TFFeatures_FeatureEntry_DoNotUse)},
  { 24, -1, -1, sizeof(::TFFeatures)},
  { 31, -1, -1, sizeof(::TFFeature)},
  { 41, -1, -1, sizeof(::TFBytesList)},
  { 48, -1, -1, sizeof(::TFFloatList)},
  { 55, -1, -1, sizeof(::TFInt64List)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_BatchSamples_default_instance_._instance,
  &::_Example_default_instance_._instance,
  &::_TFFeatures_FeatureEntry_DoNotUse_default_instance_._instance,
  &::_TFFeatures_default_instance_._instance,
  &::_TFFeature_default_instance_._instance,
  &::_TFBytesList_default_instance_._instance,
  &::_TFFloatList_default_instance_._instance,
  &::_TFInt64List_default_instance_._instance,
};

const char descriptor_table_protodef_tfexample_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017tfexample.proto\"\'\n\014BatchSamples\022\027\n\005val"
  "ue\030\001 \003(\0132\010.Example\"(\n\007Example\022\035\n\010feature"
  "s\030\001 \001(\0132\013.TFFeatures\"s\n\nTFFeatures\022)\n\007fe"
  "ature\030\001 \003(\0132\030.TFFeatures.FeatureEntry\032:\n"
  "\014FeatureEntry\022\013\n\003key\030\001 \001(\t\022\031\n\005value\030\002 \001("
  "\0132\n.TFFeature:\0028\001\"\177\n\tTFFeature\022\"\n\nbytes_"
  "list\030\001 \001(\0132\014.TFBytesListH\000\022\"\n\nfloat_list"
  "\030\002 \001(\0132\014.TFFloatListH\000\022\"\n\nint64_list\030\003 \001"
  "(\0132\014.TFInt64ListH\000B\006\n\004kind\"\034\n\013TFBytesLis"
  "t\022\r\n\005value\030\001 \003(\014\" \n\013TFFloatList\022\021\n\005value"
  "\030\001 \003(\002B\002\020\001\" \n\013TFInt64List\022\021\n\005value\030\001 \003(\003"
  "B\002\020\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_tfexample_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tfexample_2eproto = {
    false, false, 452, descriptor_table_protodef_tfexample_2eproto,
    "tfexample.proto",
    &descriptor_table_tfexample_2eproto_once, nullptr, 0, 8,
    schemas, file_default_instances, TableStruct_tfexample_2eproto::offsets,
    file_level_metadata_tfexample_2eproto, file_level_enum_descriptors_tfexample_2eproto,
    file_level_service_descriptors_tfexample_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tfexample_2eproto_getter() {
  return &descriptor_table_tfexample_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tfexample_2eproto(&descriptor_table_tfexample_2eproto);

// ===================================================================

class BatchSamples::_Internal {
 public:
};

BatchSamples::BatchSamples(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:BatchSamples)
}
BatchSamples::BatchSamples(const BatchSamples& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BatchSamples* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){from._impl_.value_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BatchSamples)
}

inline void BatchSamples::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BatchSamples::~BatchSamples() {
  // @@protoc_insertion_point(destructor:BatchSamples)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BatchSamples::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.~RepeatedPtrField();
}

void BatchSamples::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BatchSamples::Clear() {
// @@protoc_insertion_point(message_clear_start:BatchSamples)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchSamples::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Example value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BatchSamples::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BatchSamples)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Example value = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_value_size()); i < n; i++) {
    const auto& repfield = this->_internal_value(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BatchSamples)
  return target;
}

size_t BatchSamples::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BatchSamples)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Example value = 1;
  total_size += 1UL * this->_internal_value_size();
  for (const auto& msg : this->_impl_.value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchSamples::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BatchSamples::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchSamples::GetClassData() const { return &_class_data_; }


void BatchSamples::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BatchSamples*>(&to_msg);
  auto& from = static_cast<const BatchSamples&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:BatchSamples)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.value_.MergeFrom(from._impl_.value_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchSamples::CopyFrom(const BatchSamples& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BatchSamples)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchSamples::IsInitialized() const {
  return true;
}

void BatchSamples::InternalSwap(BatchSamples* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.value_.InternalSwap(&other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchSamples::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tfexample_2eproto_getter, &descriptor_table_tfexample_2eproto_once,
      file_level_metadata_tfexample_2eproto[0]);
}

// ===================================================================

class Example::_Internal {
 public:
  static const ::TFFeatures& features(const Example* msg);
};

const ::TFFeatures&
Example::_Internal::features(const Example* msg) {
  return *msg->_impl_.features_;
}
Example::Example(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Example)
}
Example::Example(const Example& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Example* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.features_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_features()) {
    _this->_impl_.features_ = new ::TFFeatures(*from._impl_.features_);
  }
  // @@protoc_insertion_point(copy_constructor:Example)
}

inline void Example::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.features_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Example::~Example() {
  // @@protoc_insertion_point(destructor:Example)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Example::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.features_;
}

void Example::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Example::Clear() {
// @@protoc_insertion_point(message_clear_start:Example)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.features_ != nullptr) {
    delete _impl_.features_;
  }
  _impl_.features_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Example::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TFFeatures features = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_features(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Example::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Example)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TFFeatures features = 1;
  if (this->_internal_has_features()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::features(this),
        _Internal::features(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Example)
  return target;
}

size_t Example::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Example)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TFFeatures features = 1;
  if (this->_internal_has_features()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.features_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Example::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Example::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Example::GetClassData() const { return &_class_data_; }


void Example::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Example*>(&to_msg);
  auto& from = static_cast<const Example&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Example)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_features()) {
    _this->_internal_mutable_features()->::TFFeatures::MergeFrom(
        from._internal_features());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Example::CopyFrom(const Example& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Example)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Example::IsInitialized() const {
  return true;
}

void Example::InternalSwap(Example* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.features_, other->_impl_.features_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Example::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tfexample_2eproto_getter, &descriptor_table_tfexample_2eproto_once,
      file_level_metadata_tfexample_2eproto[1]);
}

// ===================================================================

TFFeatures_FeatureEntry_DoNotUse::TFFeatures_FeatureEntry_DoNotUse() {}
TFFeatures_FeatureEntry_DoNotUse::TFFeatures_FeatureEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TFFeatures_FeatureEntry_DoNotUse::MergeFrom(const TFFeatures_FeatureEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TFFeatures_FeatureEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tfexample_2eproto_getter, &descriptor_table_tfexample_2eproto_once,
      file_level_metadata_tfexample_2eproto[2]);
}

// ===================================================================

class TFFeatures::_Internal {
 public:
};

TFFeatures::TFFeatures(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &TFFeatures::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:TFFeatures)
}
TFFeatures::TFFeatures(const TFFeatures& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TFFeatures* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.feature_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.feature_.MergeFrom(from._impl_.feature_);
  // @@protoc_insertion_point(copy_constructor:TFFeatures)
}

inline void TFFeatures::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.feature_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TFFeatures::~TFFeatures() {
  // @@protoc_insertion_point(destructor:TFFeatures)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void TFFeatures::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.feature_.Destruct();
  _impl_.feature_.~MapField();
}

void TFFeatures::ArenaDtor(void* object) {
  TFFeatures* _this = reinterpret_cast< TFFeatures* >(object);
  _this->_impl_.feature_.Destruct();
}
void TFFeatures::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TFFeatures::Clear() {
// @@protoc_insertion_point(message_clear_start:TFFeatures)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.feature_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TFFeatures::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .TFFeature> feature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.feature_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TFFeatures::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TFFeatures)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .TFFeature> feature = 1;
  if (!this->_internal_feature().empty()) {
    using MapType = ::_pb::Map<std::string, ::TFFeature>;
    using WireHelper = TFFeatures_FeatureEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_feature();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "TFFeatures.FeatureEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TFFeatures)
  return target;
}

size_t TFFeatures::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TFFeatures)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .TFFeature> feature = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_feature_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TFFeature >::const_iterator
      it = this->_internal_feature().begin();
      it != this->_internal_feature().end(); ++it) {
    total_size += TFFeatures_FeatureEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TFFeatures::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TFFeatures::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TFFeatures::GetClassData() const { return &_class_data_; }


void TFFeatures::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TFFeatures*>(&to_msg);
  auto& from = static_cast<const TFFeatures&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TFFeatures)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.feature_.MergeFrom(from._impl_.feature_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TFFeatures::CopyFrom(const TFFeatures& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TFFeatures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFFeatures::IsInitialized() const {
  return true;
}

void TFFeatures::InternalSwap(TFFeatures* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.feature_.InternalSwap(&other->_impl_.feature_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TFFeatures::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tfexample_2eproto_getter, &descriptor_table_tfexample_2eproto_once,
      file_level_metadata_tfexample_2eproto[3]);
}

// ===================================================================

class TFFeature::_Internal {
 public:
  static const ::TFBytesList& bytes_list(const TFFeature* msg);
  static const ::TFFloatList& float_list(const TFFeature* msg);
  static const ::TFInt64List& int64_list(const TFFeature* msg);
};

const ::TFBytesList&
TFFeature::_Internal::bytes_list(const TFFeature* msg) {
  return *msg->_impl_.kind_.bytes_list_;
}
const ::TFFloatList&
TFFeature::_Internal::float_list(const TFFeature* msg) {
  return *msg->_impl_.kind_.float_list_;
}
const ::TFInt64List&
TFFeature::_Internal::int64_list(const TFFeature* msg) {
  return *msg->_impl_.kind_.int64_list_;
}
void TFFeature::set_allocated_bytes_list(::TFBytesList* bytes_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (bytes_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bytes_list);
    if (message_arena != submessage_arena) {
      bytes_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bytes_list, submessage_arena);
    }
    set_has_bytes_list();
    _impl_.kind_.bytes_list_ = bytes_list;
  }
  // @@protoc_insertion_point(field_set_allocated:TFFeature.bytes_list)
}
void TFFeature::set_allocated_float_list(::TFFloatList* float_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (float_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(float_list);
    if (message_arena != submessage_arena) {
      float_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, float_list, submessage_arena);
    }
    set_has_float_list();
    _impl_.kind_.float_list_ = float_list;
  }
  // @@protoc_insertion_point(field_set_allocated:TFFeature.float_list)
}
void TFFeature::set_allocated_int64_list(::TFInt64List* int64_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (int64_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(int64_list);
    if (message_arena != submessage_arena) {
      int64_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, int64_list, submessage_arena);
    }
    set_has_int64_list();
    _impl_.kind_.int64_list_ = int64_list;
  }
  // @@protoc_insertion_point(field_set_allocated:TFFeature.int64_list)
}
TFFeature::TFFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TFFeature)
}
TFFeature::TFFeature(const TFFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TFFeature* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.kind_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_kind();
  switch (from.kind_case()) {
    case kBytesList: {
      _this->_internal_mutable_bytes_list()->::TFBytesList::MergeFrom(
          from._internal_bytes_list());
      break;
    }
    case kFloatList: {
      _this->_internal_mutable_float_list()->::TFFloatList::MergeFrom(
          from._internal_float_list());
      break;
    }
    case kInt64List: {
      _this->_internal_mutable_int64_list()->::TFInt64List::MergeFrom(
          from._internal_int64_list());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TFFeature)
}

inline void TFFeature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.kind_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_kind();
}

TFFeature::~TFFeature() {
  // @@protoc_insertion_point(destructor:TFFeature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TFFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_kind()) {
    clear_kind();
  }
}

void TFFeature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TFFeature::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:TFFeature)
  switch (kind_case()) {
    case kBytesList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.bytes_list_;
      }
      break;
    }
    case kFloatList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.float_list_;
      }
      break;
    }
    case kInt64List: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.int64_list_;
      }
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = KIND_NOT_SET;
}


void TFFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:TFFeature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_kind();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TFFeature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TFBytesList bytes_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bytes_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TFFloatList float_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_float_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TFInt64List int64_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_int64_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TFFeature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TFFeature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TFBytesList bytes_list = 1;
  if (_internal_has_bytes_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::bytes_list(this),
        _Internal::bytes_list(this).GetCachedSize(), target, stream);
  }

  // .TFFloatList float_list = 2;
  if (_internal_has_float_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::float_list(this),
        _Internal::float_list(this).GetCachedSize(), target, stream);
  }

  // .TFInt64List int64_list = 3;
  if (_internal_has_int64_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::int64_list(this),
        _Internal::int64_list(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TFFeature)
  return target;
}

size_t TFFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TFFeature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (kind_case()) {
    // .TFBytesList bytes_list = 1;
    case kBytesList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.bytes_list_);
      break;
    }
    // .TFFloatList float_list = 2;
    case kFloatList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.float_list_);
      break;
    }
    // .TFInt64List int64_list = 3;
    case kInt64List: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.int64_list_);
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TFFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TFFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TFFeature::GetClassData() const { return &_class_data_; }


void TFFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TFFeature*>(&to_msg);
  auto& from = static_cast<const TFFeature&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TFFeature)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.kind_case()) {
    case kBytesList: {
      _this->_internal_mutable_bytes_list()->::TFBytesList::MergeFrom(
          from._internal_bytes_list());
      break;
    }
    case kFloatList: {
      _this->_internal_mutable_float_list()->::TFFloatList::MergeFrom(
          from._internal_float_list());
      break;
    }
    case kInt64List: {
      _this->_internal_mutable_int64_list()->::TFInt64List::MergeFrom(
          from._internal_int64_list());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TFFeature::CopyFrom(const TFFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TFFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFFeature::IsInitialized() const {
  return true;
}

void TFFeature::InternalSwap(TFFeature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.kind_, other->_impl_.kind_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TFFeature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tfexample_2eproto_getter, &descriptor_table_tfexample_2eproto_once,
      file_level_metadata_tfexample_2eproto[4]);
}

// ===================================================================

class TFBytesList::_Internal {
 public:
};

TFBytesList::TFBytesList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TFBytesList)
}
TFBytesList::TFBytesList(const TFBytesList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TFBytesList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){from._impl_.value_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TFBytesList)
}

inline void TFBytesList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TFBytesList::~TFBytesList() {
  // @@protoc_insertion_point(destructor:TFBytesList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TFBytesList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.~RepeatedPtrField();
}

void TFBytesList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TFBytesList::Clear() {
// @@protoc_insertion_point(message_clear_start:TFBytesList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TFBytesList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_value();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TFBytesList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TFBytesList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes value = 1;
  for (int i = 0, n = this->_internal_value_size(); i < n; i++) {
    const auto& s = this->_internal_value(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TFBytesList)
  return target;
}

size_t TFBytesList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TFBytesList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes value = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.value_.size());
  for (int i = 0, n = _impl_.value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.value_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TFBytesList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TFBytesList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TFBytesList::GetClassData() const { return &_class_data_; }


void TFBytesList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TFBytesList*>(&to_msg);
  auto& from = static_cast<const TFBytesList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TFBytesList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.value_.MergeFrom(from._impl_.value_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TFBytesList::CopyFrom(const TFBytesList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TFBytesList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFBytesList::IsInitialized() const {
  return true;
}

void TFBytesList::InternalSwap(TFBytesList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.value_.InternalSwap(&other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TFBytesList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tfexample_2eproto_getter, &descriptor_table_tfexample_2eproto_once,
      file_level_metadata_tfexample_2eproto[5]);
}

// ===================================================================

class TFFloatList::_Internal {
 public:
};

TFFloatList::TFFloatList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TFFloatList)
}
TFFloatList::TFFloatList(const TFFloatList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TFFloatList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){from._impl_.value_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TFFloatList)
}

inline void TFFloatList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TFFloatList::~TFFloatList() {
  // @@protoc_insertion_point(destructor:TFFloatList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TFFloatList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.~RepeatedField();
}

void TFFloatList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TFFloatList::Clear() {
// @@protoc_insertion_point(message_clear_start:TFFloatList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TFFloatList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float value = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 13) {
          _internal_add_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TFFloatList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TFFloatList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float value = 1 [packed = true];
  if (this->_internal_value_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TFFloatList)
  return target;
}

size_t TFFloatList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TFFloatList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float value = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_value_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TFFloatList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TFFloatList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TFFloatList::GetClassData() const { return &_class_data_; }


void TFFloatList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TFFloatList*>(&to_msg);
  auto& from = static_cast<const TFFloatList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TFFloatList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.value_.MergeFrom(from._impl_.value_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TFFloatList::CopyFrom(const TFFloatList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TFFloatList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFFloatList::IsInitialized() const {
  return true;
}

void TFFloatList::InternalSwap(TFFloatList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.value_.InternalSwap(&other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TFFloatList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tfexample_2eproto_getter, &descriptor_table_tfexample_2eproto_once,
      file_level_metadata_tfexample_2eproto[6]);
}

// ===================================================================

class TFInt64List::_Internal {
 public:
};

TFInt64List::TFInt64List(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TFInt64List)
}
TFInt64List::TFInt64List(const TFInt64List& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TFInt64List* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){from._impl_.value_}
    , /*decltype(_impl_._value_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TFInt64List)
}

inline void TFInt64List::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){arena}
    , /*decltype(_impl_._value_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TFInt64List::~TFInt64List() {
  // @@protoc_insertion_point(destructor:TFInt64List)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TFInt64List::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.~RepeatedField();
}

void TFInt64List::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TFInt64List::Clear() {
// @@protoc_insertion_point(message_clear_start:TFInt64List)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TFInt64List::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 value = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TFInt64List::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TFInt64List)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 value = 1 [packed = true];
  {
    int byte_size = _impl_._value_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_value(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TFInt64List)
  return target;
}

size_t TFInt64List::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TFInt64List)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 value = 1 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.value_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._value_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TFInt64List::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TFInt64List::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TFInt64List::GetClassData() const { return &_class_data_; }


void TFInt64List::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TFInt64List*>(&to_msg);
  auto& from = static_cast<const TFInt64List&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TFInt64List)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.value_.MergeFrom(from._impl_.value_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TFInt64List::CopyFrom(const TFInt64List& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TFInt64List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFInt64List::IsInitialized() const {
  return true;
}

void TFInt64List::InternalSwap(TFInt64List* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.value_.InternalSwap(&other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TFInt64List::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tfexample_2eproto_getter, &descriptor_table_tfexample_2eproto_once,
      file_level_metadata_tfexample_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::BatchSamples*
Arena::CreateMaybeMessage< ::BatchSamples >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BatchSamples >(arena);
}
template<> PROTOBUF_NOINLINE ::Example*
Arena::CreateMaybeMessage< ::Example >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Example >(arena);
}
template<> PROTOBUF_NOINLINE ::TFFeatures_FeatureEntry_DoNotUse*
Arena::CreateMaybeMessage< ::TFFeatures_FeatureEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TFFeatures_FeatureEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::TFFeatures*
Arena::CreateMaybeMessage< ::TFFeatures >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TFFeatures >(arena);
}
template<> PROTOBUF_NOINLINE ::TFFeature*
Arena::CreateMaybeMessage< ::TFFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TFFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::TFBytesList*
Arena::CreateMaybeMessage< ::TFBytesList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TFBytesList >(arena);
}
template<> PROTOBUF_NOINLINE ::TFFloatList*
Arena::CreateMaybeMessage< ::TFFloatList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TFFloatList >(arena);
}
template<> PROTOBUF_NOINLINE ::TFInt64List*
Arena::CreateMaybeMessage< ::TFInt64List >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TFInt64List >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
